import os
import re

def normalize_svg(svg_string):
    return svg_string.strip().replace('\r\n', '\n')

def generate_rust_test_file(fixtures_dir, output_file):
    test_cases = []
    for root, _, files in os.walk(fixtures_dir):
        for file_name in files:
            if file_name.endswith(".svg.txt"):
                file_path = os.path.join(root, file_name)
                relative_path = os.path.relpath(file_path, fixtures_dir)
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()

                # Split by '===' to separate description from test case
                parts = content.split('===')
                test_content = parts[1] if len(parts) > 1 else parts[0]

                # Split by '@@@' to separate original, expected, and params
                test_parts = test_content.split('@@@')
                original_svg = normalize_svg(test_parts[0])
                expected_svg = normalize_svg(test_parts[1]) if len(test_parts) > 1 else ""
                params_json = test_parts[2].strip() if len(test_parts) > 2 else "{}"

                # Extract plugin name from filename (e.g., removeComments.01.svg.txt -> removeComments)
                plugin_name_match = re.match(r'([a-zA-Z0-9]+)\.\d+\.svg\.txt', file_name)
                plugin_name = plugin_name_match.group(1) if plugin_name_match else "unknown_plugin"

                test_cases.append({
                    "name": os.path.splitext(os.path.splitext(file_name)[0])[0].replace('.', '_').replace('-', '_'),
                    "original": original_svg,
                    "expected": expected_svg,
                    "plugin_name": plugin_name,
                    "params": params_json,
                    "file_path": relative_path.replace('\\', '/'), # Use forward slashes for Rust path
                })

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("// This file is auto-generated by generate_compatibility_tests.py\n")
        f.write("// Do not modify it directly.\n\n")
        f.write("use crate::optimize;\n")
        f.write("use crate::config::{Config, PluginConfig};\n")
        f.write("use std::collections::HashMap;\n")
        f.write("use serde_json::from_str;\n\n")
        f.write("fn normalize_svg(s: &str) -> String {\n")
        f.write("    s.trim().replace("\r\n", "\n").to_string()\n")
        f.write("}\n\n")
        f.write("#[test]\n")
        f.write("fn compatibility_tests() {\n")
        f.write("    let test_cases: Vec<(&str, &str, &str, &str, &str)> = vec![\n")
        for case in test_cases:
            f.write(f"        (\"{case['name']}\", r#\"{case['original']}\"#, r#\"{case['expected']}\"#, \"{case['plugin_name']}\", r#\"{case['params']}\"#),\n")
        f.write("    ];\n\n")
        f.write("    for (name, original, expected, plugin_name, params_json) in test_cases {\n")
        f.write("        println!(\"Running test: {}\n\", name);\n")
        f.write("        let mut config = Config::default();\n")
        f.write("        let mut plugin_map = HashMap::new();\n")
        f.write("        let params: serde_json::Value = from_str(params_json).unwrap();\n")
        f.write("        plugin_map.insert(plugin_name.to_string(), params);\n")
        f.write("        config.plugins = Some(vec![PluginConfig::Enabled { name: plugin_name.to_string(), params: Some(plugin_map) }]);\n")
        f.write("        \n")
        f.write("        let result = optimize(original.to_string(), Some(config));\n")
        f.write("        assert!(result.is_ok(), \"Test {} failed with error: {:?}\", name, result.err());\n")
        f.write("        let optimized_svg = normalize_svg(&result.unwrap().data);\n")
        f.write("        assert_eq!(optimized_svg, expected, \"Test {} failed\\nOriginal:\\n{}\nExpected:\\n{}\nActual:\\n{}\", name, original, expected, optimized_svg);\n")
        f.write("    }\n")
        f.write("}\n")

if __name__ == "__main__":
    fixtures_dir = "/Users/adam/Developer/vcs/github.twardoch/pub/svgn/ref/svgo/test/plugins"
    output_file = "/Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/tests/compatibility_plugins_test.rs"
    generate_rust_test_file(fixtures_dir, output_file)

    fixtures_dir = "/Users/adam/Developer/vcs/github.twardoch/pub/svgn/ref/svgo/test/svgo"
    output_file = "/Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/tests/compatibility_svgo_test.rs"
    generate_rust_test_file(fixtures_dir, output_file)