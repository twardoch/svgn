Generating code snapshot in ./llms.txt ...
╭───────────────────────────── CodeToPrompt ──────────────────────────────╮
│ Configuration for this run:                                             │
│ Root Directory: /Users/adam/Developer/vcs/github.twardoch/pub/svgn      │
│ Include Patterns: ['*']                                                 │
│ Exclude Patterns: ['*.svg', '.specstory', '*.md', '*.txt', 'ref',       │
│ 'testdata', '*.lock']                                                   │
│ Respect .gitignore: True                                                │
│ Show Line Numbers: False                                                │
│ Count Tokens: True                                                      │
│ Compress Code: True                                                     │
│ Max Tokens: Unlimited                                                   │
│ Tree Depth: 5                                                           │
│ Output Format: default                                                  │
│ Interactive Mode: False                                                 │
╰─────────────────────────────────────────────────────────────────────────╯

╭──────────────────────── Processing Complete ────────────────────────╮
│ Summary:                                                            │
│ Files Processed: 105                                                │
│ Total Tokens: 67,159                                                │
│ Output Destination: llms.txt                                        │
│                                                                     │
│ Top 3 Files by Tokens:                                              │
│   - svgn/src/collections.rs (5,362 tokens)                          │
│   - svgn/src/plugins/remove_unknowns_and_defaults.rs (4,955 tokens) │
│   - svgn/src/plugins/cleanup_list_of_values.rs (3,957 tokens)       │
│                                                                     │
│ Top 5 Extensions by Tokens:                                         │
│   - .rs (51,262 tokens)                                             │
│   - .sh (6,130 tokens)                                              │
│   - .yml (2,940 tokens)                                             │
│   - .bak (2,786 tokens)                                             │
│   - .cmd (2,652 tokens)                                             │
╰─────────────────────────────────────────────────────────────────────╯
Building the svgn project...
   Compiling svgn v1.2.3 (/Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn)
    Finished `release` profile [optimized] target(s) in 6m 12s
Running tests...
   Compiling svgn v1.2.3 (/Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 9.84s
     Running unittests src/lib.rs (target/debug/deps/svgn-427c3a642d0a455f)

running 347 tests
test config::tests::test_default_config ... ok
test ast::tests::test_child_operations ... ok
test ast::tests::test_element_creation ... ok
test config::tests::test_plugin_management ... ok
test config::tests::test_default_preset ... ok
test ast::tests::test_whitespace_detection ... ok
test optimizer::tests::test_datauri_encoding ... ok
test optimizer::tests::test_optimization_info ... ok
test ast::tests::test_attribute_operations ... ok
test parser::tests::test_parse_empty_element ... ok
test parser::tests::test_parse_invalid_xml ... ok
test config::tests::test_json_parsing ... ok
test config::tests::test_config_serialization ... ok
test parser::tests::test_parse_simple_svg ... ok
test optimizer::tests::test_optimize_with_config ... ok
test parser::tests::test_parse_with_comments ... ok
test optimizer::tests::test_optimize_simple_svg ... ok
test plugin::tests::test_apply_plugins ... ok
test parser::tests::test_parse_with_text ... ok
test parser::tests::test_parse_with_namespaces ... ok
test plugin::tests::test_apply_unknown_plugin ... ok
test plugin::tests::test_plugin_config ... ok
test plugin::tests::test_plugin_registry ... ok
test plugins::add_attributes_to_svg_element::tests::test_add_attributes_with_values ... ok
test plugins::add_attributes_to_svg_element::tests::test_add_multiple_attributes ... ok
test plugins::add_attributes_to_svg_element::tests::test_add_single_attribute ... ok
test plugins::add_attributes_to_svg_element::tests::test_dont_overwrite_existing_attributes ... ok
test plugins::add_attributes_to_svg_element::tests::test_invalid_params ... ok
test plugins::add_attributes_to_svg_element::tests::test_missing_params ... ok
test plugins::add_attributes_to_svg_element::tests::test_non_svg_element ... ok
test plugins::add_attributes_to_svg_element::tests::test_validate_params ... ok
test plugins::add_classes_to_svg_element::tests::test_add_classes_to_existing ... ok
test plugins::add_classes_to_svg_element::tests::test_add_single_class ... ok
test plugins::add_classes_to_svg_element::tests::test_add_multiple_classes ... ok
test plugins::add_classes_to_svg_element::tests::test_duplicate_classes ... ok
test plugins::add_classes_to_svg_element::tests::test_empty_class_names ... ok
test plugins::add_classes_to_svg_element::tests::test_invalid_class_name_type ... ok
test plugins::add_classes_to_svg_element::tests::test_invalid_params ... ok
test plugins::add_classes_to_svg_element::tests::test_missing_params ... ok
test plugins::add_classes_to_svg_element::tests::test_non_svg_element ... ok
test plugins::add_classes_to_svg_element::tests::test_validate_params ... ok
test plugins::cleanup_attrs::tests::test_with_params ... ok
test plugins::cleanup_enable_background::tests::test_remove_without_filter ... ok
test plugins::cleanup_ids::tests::test_skip_with_scripts ... ok
test plugins::cleanup_ids::tests::test_preserve_ids ... ok
test plugins::cleanup_list_of_values::tests::test_plugin_name_and_description ... ok
test plugins::cleanup_list_of_values::tests::test_preserves_non_list_attributes ... ok
test plugins::cleanup_enable_background::tests::test_keep_non_matching ... ok
test plugins::cleanup_enable_background::tests::test_cleanup_with_filter ... ok
test plugins::cleanup_enable_background::tests::test_simplify_mask_pattern ... ok
test plugins::cleanup_numeric_values::tests::test_cleans_viewbox ... ok
test plugins::cleanup_ids::tests::test_remove_unused_ids ... ok
test plugins::cleanup_attrs::tests::test_cleanup_spaces ... ok
test plugins::cleanup_ids::tests::test_minify_ids ... ok
test plugins::cleanup_list_of_values::tests::test_handles_comma_separated_values ... ok
test plugins::cleanup_list_of_values::tests::test_rounds_stroke_dasharray ... ok
test plugins::cleanup_list_of_values::tests::test_handles_enable_background_with_new ... ok
test plugins::cleanup_list_of_values::tests::test_configurable_precision ... ok
test plugins::cleanup_list_of_values::tests::test_rounds_points_list ... ok
test plugins::cleanup_list_of_values::tests::test_rounds_viewbox ... ok
test plugins::cleanup_list_of_values::tests::test_rounds_text_positioning ... ok
test plugins::cleanup_list_of_values::tests::test_converts_units_in_lists ... ok
test plugins::cleanup_attrs::tests::test_cleanup_newlines ... ok
test plugins::cleanup_list_of_values::tests::test_handles_mixed_separators ... ok
test plugins::cleanup_numeric_values::tests::test_plugin_name_and_description ... ok
test plugins::cleanup_list_of_values::tests::test_configurable_leading_zero ... ok
test plugins::collapse_groups::tests::test_collapse_empty_group ... ok
test plugins::collapse_groups::tests::test_concatenate_transforms ... ok
test plugins::collapse_groups::tests::test_move_attributes_to_single_child ... ok
test plugins::collapse_groups::tests::test_nested_groups ... ok
test plugins::collapse_groups::tests::test_preserve_group_with_id ... ok
test plugins::collapse_groups::tests::test_preserve_group_with_multiple_children ... ok
test plugins::convert_colors::tests::test_convert_to_short_hex ... ok
test plugins::convert_ellipse_to_circle::tests::test_convert_equal_radii ... ok
test plugins::convert_ellipse_to_circle::tests::test_convert_rx_auto ... ok
test plugins::convert_ellipse_to_circle::tests::test_convert_ry_auto ... ok
test plugins::convert_ellipse_to_circle::tests::test_default_zero_values ... ok
test plugins::convert_ellipse_to_circle::tests::test_keep_unequal_radii ... ok
test plugins::convert_ellipse_to_circle::tests::test_nested_ellipses ... ok
test plugins::convert_one_stop_gradients::tests::test_apply_with_empty_document ... ok
test plugins::convert_one_stop_gradients::tests::test_apply_with_no_gradients ... ok
test plugins::convert_one_stop_gradients::tests::test_extract_gradient_id ... ok
test plugins::convert_one_stop_gradients::tests::test_plugin_creation ... ok
test plugins::convert_path_data::tests::test_format_number ... ok
test plugins::convert_path_data::tests::test_optimize_removes_useless_lineto ... ok
test plugins::convert_path_data::tests::test_parse_relative_path ... ok
test plugins::convert_path_data::tests::test_parse_simple_path ... ok
test plugins::convert_shape_to_path::tests::test_convert_circle ... ok
test plugins::convert_shape_to_path::tests::test_convert_line ... ok
test plugins::convert_shape_to_path::tests::test_convert_rect_basic ... ok
test plugins::cleanup_numeric_values::tests::test_rounds_decimal_values ... ok
test plugins::cleanup_numeric_values::tests::test_removes_leading_zeros ... ok
test plugins::cleanup_numeric_values::tests::test_configurable_default_px ... ok
test plugins::cleanup_numeric_values::tests::test_preserves_version_attribute ... ok
test plugins::cleanup_numeric_values::tests::test_removes_default_px_units ... ok
test plugins::cleanup_numeric_values::tests::test_preserves_non_numeric_values ... ok
test plugins::convert_shape_to_path::tests::test_convert_rect_with_position ... ok
test plugins::convert_shape_to_path::tests::test_precision_formatting ... ok
test plugins::convert_shape_to_path::tests::test_rect_with_rounded_corners_not_converted ... ok
test plugins::cleanup_numeric_values::tests::test_configurable_leading_zero ... ok
test plugins::cleanup_numeric_values::tests::test_configurable_precision ... ok
test plugins::cleanup_numeric_values::tests::test_converts_units_to_px ... ok
test plugins::convert_transform::tests::test_remove_useless_transforms ... ok
test plugins::merge_styles::tests::test_merge_styles ... ok
test plugins::merge_styles::tests::test_merge_styles_with_media ... ok
test plugins::merge_styles::tests::test_remove_empty_styles ... ok
test plugins::convert_transform::tests::test_plugin_optimizes_transform ... ok
test plugins::convert_transform::tests::test_plugin_removes_identity_transform ... ok
test plugins::convert_transform::tests::test_parse_transform_string ... ok
test plugins::convert_shape_to_path::tests::test_convert_polygon ... ok
test plugins::convert_shape_to_path::tests::test_convert_polyline ... ok
test plugins::convert_colors::tests::test_color_name_to_hex ... ok
test plugins::convert_colors::tests::test_color_params ... ok
test plugins::prefix_ids::tests::test_apply_with_custom_config ... ok
test plugins::prefix_ids::tests::test_apply_with_href ... ok
test plugins::prefix_ids::tests::test_apply_with_ids ... ok
test plugins::prefix_ids::tests::test_escape_identifier_name ... ok
test plugins::minify_styles::tests::test_minify_css_basic ... ok
test plugins::minify_styles::tests::test_complex_css_minification ... ok
test plugins::minify_styles::tests::test_minify_style_element ... ok
test plugins::minify_styles::tests::test_minify_css_block_trailing_semicolon ... ok
test plugins::minify_styles::tests::test_preserve_important ... ok
test plugins::minify_styles::tests::test_style_attribute_minification ... ok
test plugins::minify_styles::tests::test_minify_css_with_comments ... ok
test plugins::minify_styles::tests::test_minify_css_block ... ok
test plugins::minify_styles::tests::test_empty_style_element_removal ... ok
test plugins::minify_styles::tests::test_minify_css_preserve_comments ... ok
test plugins::convert_colors::tests::test_rgb_to_hex ... ok
test plugins::prefix_ids::tests::test_plugin_creation ... ok
test plugins::prefix_ids::tests::test_prefix_id ... ok
test plugins::prefix_ids::tests::test_prefix_reference ... ok
test plugins::remove_attributes_by_selector::tests::test_invalid_selector ... ok
test plugins::remove_attributes_by_selector::tests::test_element_name_selector ... ok
test plugins::remove_attributes_by_selector::tests::test_multiple_attributes_removal ... ok
test plugins::remove_attributes_by_selector::tests::test_single_attribute_removal ... ok
test plugins::remove_attributes_by_selector::tests::test_multiple_selectors ... ok
test plugins::prefix_ids::tests::test_generate_prefix ... ok
test plugins::remove_attrs::tests::test_no_attrs_parameter_error ... ok
test plugins::remove_attrs::tests::test_plugin_name_and_description ... ok
test plugins::remove_attrs::tests::test_custom_separator ... ok
test plugins::remove_attrs::tests::test_element_specific_removal ... ok
test plugins::remove_comments::tests::test_remove_comments ... ok
test plugins::remove_attrs::tests::test_nested_elements ... ok
test plugins::remove_deprecated_attrs::tests::test_animation_attribute_target ... ok
test plugins::remove_deprecated_attrs::tests::test_keep_xml_lang_without_lang ... ok
test plugins::remove_attrs::tests::test_preserve_current_color ... ok
test plugins::remove_deprecated_attrs::tests::test_remove_unsafe_attributes ... ok
test plugins::remove_deprecated_attrs::tests::test_remove_xml_lang_when_lang_exists ... ok
test plugins::remove_desc::tests::test_remove_any ... ok
test plugins::remove_desc::tests::test_remove_empty_desc ... ok
test plugins::remove_dimensions::tests::test_create_viewbox_from_dimensions ... ok
test plugins::remove_dimensions::tests::test_decimal_dimensions ... ok
test plugins::remove_attrs::tests::test_value_specific_removal ... ok
test plugins::remove_dimensions::tests::test_missing_dimension_ignored ... ok
test plugins::remove_dimensions::tests::test_invalid_dimensions_ignored ... ok
test plugins::remove_desc::tests::test_preserve_custom_desc ... ok
test plugins::remove_dimensions::tests::test_no_dimensions_no_change ... ok
test plugins::remove_dimensions::tests::test_plugin_creation ... ok
test plugins::remove_dimensions::tests::test_only_processes_svg_elements ... ok
test plugins::remove_attrs::tests::test_preserve_current_color_case_insensitive ... ok
test plugins::remove_dimensions::tests::test_nested_svg_elements ... ok
test plugins::remove_desc::tests::test_remove_standard_desc ... ok
test plugins::remove_dimensions::tests::test_remove_dimensions_with_existing_viewbox ... ok
test plugins::remove_dimensions::tests::test_zero_dimensions ... ok
test plugins::remove_doctype::tests::test_empty_document ... ok
test plugins::remove_doctype::tests::test_remove_doctype ... ok
test plugins::remove_editors_ns_data::tests::test_apply_preserves_normal_content ... ok
test plugins::remove_editors_ns_data::tests::test_apply_removes_editor_content ... ok
test plugins::remove_editors_ns_data::tests::test_plugin_creation ... ok
test plugins::remove_editors_ns_data::tests::test_apply_with_additional_namespaces ... ok
test plugins::remove_editors_ns_data::tests::test_collect_editor_prefixes ... ok
test plugins::remove_editors_ns_data::tests::test_remove_editor_attributes ... ok
test plugins::remove_editors_ns_data::tests::test_should_remove_element ... ok
test plugins::remove_elements_by_attr::tests::test_apply_no_config_does_nothing ... ok
test plugins::remove_elements_by_attr::tests::test_apply_recursive ... ok
test plugins::remove_elements_by_attr::tests::test_apply_removes_by_class ... ok
test plugins::remove_elements_by_attr::tests::test_apply_removes_by_id ... ok
test plugins::remove_elements_by_attr::tests::test_parse_config_mixed ... ok
test plugins::remove_attrs::tests::test_simple_attribute_removal ... ok
test plugins::remove_elements_by_attr::tests::test_parse_config_multiple_classes ... ok
test plugins::remove_elements_by_attr::tests::test_parse_config_multiple_ids ... ok
test plugins::remove_elements_by_attr::tests::test_parse_config_single_class ... ok
test plugins::remove_elements_by_attr::tests::test_parse_config_single_id ... ok
test plugins::remove_elements_by_attr::tests::test_plugin_creation ... ok
test plugins::remove_attrs::tests::test_regex_pattern_removal ... ok
test plugins::remove_elements_by_attr::tests::test_should_remove_element_by_class ... ok
test plugins::remove_elements_by_attr::tests::test_should_remove_element_by_id ... ok
test plugins::remove_empty_attrs::tests::test_nested_elements ... ok
test plugins::remove_empty_attrs::tests::test_no_attributes ... ok
test plugins::remove_empty_attrs::tests::test_plugin_name_and_description ... ok
test plugins::remove_empty_attrs::tests::test_preserves_conditional_processing_attrs ... ok
test plugins::prefix_ids::tests::test_get_basename ... ok
test plugins::remove_empty_attrs::tests::test_removes_empty_attributes ... ok
test plugins::remove_empty_containers::tests::test_keeps_non_container_elements ... ok
test plugins::remove_empty_containers::tests::test_plugin_name_and_description ... ok
test plugins::remove_empty_containers::tests::test_preserves_elements_in_switch ... ok
test plugins::remove_empty_containers::tests::test_preserves_g_with_filter ... ok
test plugins::remove_empty_containers::tests::test_preserves_mask_with_id ... ok
test plugins::remove_empty_containers::tests::test_preserves_pattern_with_attributes ... ok
test plugins::remove_empty_containers::tests::test_preserves_svg_root ... ok
test plugins::remove_empty_containers::tests::test_removes_empty_defs ... ok
test plugins::remove_attrs::tests::test_multiple_attribute_removal ... ok
test plugins::remove_empty_containers::tests::test_removes_empty_g ... ok
test plugins::convert_style_to_attrs::tests::test_preserve_existing_attributes ... ok
test plugins::remove_empty_containers::tests::test_removes_nested_empty_containers ... ok
test plugins::remove_empty_text::tests::test_configurable_text_removal ... ok
test plugins::remove_empty_text::tests::test_configurable_tref_removal ... ok
test plugins::remove_empty_text::tests::test_configurable_tspan_removal ... ok
test plugins::remove_empty_text::tests::test_plugin_name_and_description ... ok
test plugins::remove_empty_text::tests::test_mixed_text_elements ... ok
test plugins::remove_empty_text::tests::test_preserves_text_with_content ... ok
test plugins::remove_empty_text::tests::test_preserves_tref_with_href ... ok
test plugins::remove_empty_text::tests::test_removes_empty_text ... ok
test plugins::remove_empty_text::tests::test_removes_empty_tspan ... ok
test plugins::remove_empty_text::tests::test_removes_tref_without_href ... ok
test plugins::remove_hidden_elems::tests::test_config_display_none_disabled ... ok
test plugins::remove_hidden_elems::tests::test_nested_hidden_elements ... ok
test plugins::remove_hidden_elems::tests::test_plugin_name_and_description ... ok
test plugins::remove_hidden_elems::tests::test_remove_display_none ... ok
test plugins::remove_hidden_elems::tests::test_remove_empty_path ... ok
test plugins::remove_hidden_elems::tests::test_remove_empty_groups ... ok
test plugins::remove_hidden_elems::tests::test_remove_visibility_hidden ... ok
test plugins::remove_hidden_elems::tests::test_remove_opacity_zero ... ok
test plugins::remove_hidden_elems::tests::test_remove_zero_radius_circle ... ok
test plugins::remove_hidden_elems::tests::test_remove_zero_radius_ellipse ... ok
test plugins::remove_hidden_elems::tests::test_remove_zero_width_rect ... ok
test plugins::remove_hidden_elems::tests::test_zero_line ... ok
test plugins::remove_metadata::tests::test_remove_metadata ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_empty_group ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_nested_groups ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_all_non_inheritable_attrs ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_only_affects_groups ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_plugin_name_and_description ... ok
test plugins::remove_non_inheritable_group_attrs::tests::test_remove_non_inheritable_attrs ... ok
test plugins::remove_off_canvas_paths::tests::test_plugin_name_and_description ... ok
test plugins::remove_off_canvas_paths::tests::test_no_viewbox_no_removal ... ok
test plugins::remove_off_canvas_paths::tests::test_nested_elements ... ok
test plugins::remove_off_canvas_paths::tests::test_remove_circle_outside_viewbox ... ok
test plugins::remove_off_canvas_paths::tests::test_remove_line_outside_viewbox ... ok
test plugins::remove_off_canvas_paths::tests::test_remove_polygon_outside_viewbox ... ok
test plugins::remove_off_canvas_paths::tests::test_remove_rect_outside_viewbox ... ok
test plugins::remove_off_canvas_paths::tests::test_viewbox_with_offset ... ok
test plugins::remove_raster_images::tests::test_plugin_name_and_description ... ok
test plugins::convert_colors::tests::test_convert_rgb_to_hex_function ... ok
test plugins::remove_scripts::tests::test_plugin_name_and_description ... ok
test plugins::remove_scripts::tests::test_normal_anchor_preserved ... ok
test plugins::remove_scripts::tests::test_javascript_url_in_anchor ... ok
test plugins::remove_scripts::tests::test_remove_event_attributes ... ok
test plugins::remove_scripts::tests::test_remove_script_elements ... ok
test plugins::remove_scripts::tests::test_xlink_href_with_javascript ... ok
test plugins::remove_style_element::tests::test_remove_multiple_style_elements ... ok
test plugins::remove_title::tests::test_remove_title ... ok
test plugins::remove_style_element::tests::test_remove_style_elements ... ok
test plugins::remove_unknowns_and_defaults::tests::test_configuration_options ... ok
test plugins::remove_unknowns_and_defaults::tests::test_plugin_name_and_description ... ok
test plugins::remove_unknowns_and_defaults::tests::test_preserves_id_elements_from_default_removal ... ok
test plugins::remove_unknowns_and_defaults::tests::test_preserves_data_attributes ... ok
test plugins::remove_unknowns_and_defaults::tests::test_preserves_aria_attributes ... ok
test plugins::remove_unknowns_and_defaults::tests::test_preserves_namespaced_attributes ... ok
test plugins::remove_unknowns_and_defaults::tests::test_removes_default_values ... ok
test plugins::remove_unknowns_and_defaults::tests::test_removes_unknown_attributes ... ok
test plugins::remove_unknowns_and_defaults::tests::test_removes_unknown_elements ... ok
test plugins::remove_unknowns_and_defaults::tests::test_role_attribute_handling ... ok
test plugins::remove_unused_ns::tests::test_mixed_used_and_unused_namespaces ... ok
test plugins::remove_unused_ns::tests::test_nested_element_namespace_usage ... ok
test plugins::remove_raster_images::tests::test_case_sensitivity ... ok
test plugins::remove_raster_images::tests::test_preserve_non_image_elements ... ok
test plugins::remove_raster_images::tests::test_preserve_svg_images ... ok
test plugins::remove_raster_images::tests::test_remove_png_image ... ok
test plugins::remove_raster_images::tests::test_remove_gif_image ... ok
test plugins::convert_style_to_attrs::tests::test_convert_style_to_attrs ... ok
test plugins::remove_unused_ns::tests::test_plugin_name_and_description ... ok
test plugins::remove_unused_ns::tests::test_no_namespaces_to_remove ... ok
test plugins::remove_raster_images::tests::test_remove_jpeg_image ... ok
test plugins::remove_raster_images::tests::test_nested_images ... ok
test plugins::remove_unused_ns::tests::test_preserve_used_namespace_in_attributes ... ok
test plugins::remove_unused_ns::tests::test_preserve_used_namespace_in_element_name ... ok
test plugins::remove_raster_images::tests::test_remove_data_uri_images ... ok
test plugins::remove_raster_images::tests::test_url_with_path ... ok
test plugins::remove_unused_ns::tests::test_remove_all_unused_namespaces ... ok
test plugins::remove_unused_ns::tests::test_remove_unused_namespace ... ok
test plugins::remove_useless_defs::tests::test_flatten_nested_useless_elements ... ok
test plugins::remove_useless_defs::tests::test_plugin_name_and_description ... ok
test plugins::remove_useless_defs::tests::test_non_rendering_elements_without_id ... ok
test plugins::remove_useless_defs::tests::test_preserve_elements_with_id ... ok
test plugins::remove_useless_defs::tests::test_preserve_style_elements ... ok
test plugins::remove_useless_defs::tests::test_remove_elements_without_id ... ok
test plugins::remove_useless_defs::tests::test_remove_empty_defs ... ok
test plugins::remove_useless_stroke_and_fill::tests::test_remove_stroke_none ... ok
test plugins::remove_useless_stroke_and_fill::tests::test_preserve_with_id ... ok
test plugins::remove_useless_stroke_and_fill::tests::test_remove_fill_none ... ok
test plugins::remove_useless_transforms::tests::test_is_useless_transform ... ok
test plugins::remove_useless_stroke_and_fill::tests::test_remove_zero_opacity ... ok
test plugins::remove_useless_transforms::tests::test_preserve_non_identity_transform ... ok
test plugins::remove_useless_stroke_and_fill::tests::test_skip_with_style_element ... ok
test plugins::remove_useless_transforms::tests::test_remove_identity_scale ... ok
test plugins::remove_useless_transforms::tests::test_remove_identity_translate ... ok
test plugins::remove_view_box::tests::test_comma_separated_viewbox ... ok
test plugins::convert_style_to_attrs::tests::test_complex_css_parsing ... ok
test plugins::remove_view_box::tests::test_keep_viewbox_different_dimensions ... ok
test plugins::remove_view_box::tests::test_keep_viewbox_different_origin ... ok
test plugins::remove_view_box::tests::test_keep_viewbox_missing_width_or_height ... ok
test plugins::remove_view_box::tests::test_keep_viewbox_with_px_units ... ok
test plugins::remove_view_box::tests::test_mixed_separator_viewbox ... ok
test plugins::remove_view_box::tests::test_nested_svg_preserved ... ok
test plugins::remove_view_box::tests::test_pattern_element ... ok
test plugins::remove_view_box::tests::test_plugin_name_and_description ... ok
test plugins::remove_view_box::tests::test_remove_redundant_viewbox ... ok
test plugins::remove_xlink::tests::test_convert_xlink_href_to_href ... ok
test plugins::remove_xlink::tests::test_convert_xlink_show_to_target ... ok
test plugins::remove_xlink::tests::test_convert_xlink_title_to_title_element ... ok
test plugins::remove_xlink::tests::test_plugin_name_and_description ... ok
test plugins::remove_xlink::tests::test_include_legacy_option ... ok
test plugins::remove_xlink::tests::test_preserve_existing_href ... ok
test plugins::remove_xlink::tests::test_preserve_legacy_elements ... ok
test plugins::remove_xml_proc_inst::tests::test_preserve_other_pi ... ok
test plugins::remove_xmlns::tests::test_complex_nested_structure ... ok
test plugins::remove_xml_proc_inst::tests::test_remove_xml_declaration ... ok
test plugins::remove_xmlns::tests::test_ignore_non_svg_elements ... ok
test plugins::remove_xmlns::tests::test_no_xmlns_attribute ... ok
test plugins::remove_xmlns::tests::test_plugin_name_and_description ... ok
test plugins::remove_xmlns::tests::test_preserve_other_xmlns_attributes ... ok
test plugins::remove_xmlns::tests::test_remove_xmlns_from_nested_svg ... ok
test plugins::remove_xmlns::tests::test_remove_xmlns_from_svg ... ok
test plugins::sort_attrs::tests::test_alphabetical_fallback ... ok
test plugins::sort_attrs::tests::test_custom_order ... ok
test plugins::sort_attrs::tests::test_grouped_attributes ... ok
test plugins::sort_attrs::tests::test_nested_elements ... ok
test plugins::sort_attrs::tests::test_plugin_name_and_description ... ok
test plugins::sort_attrs::tests::test_sorts_by_default_order ... ok
test plugins::sort_attrs::tests::test_xmlns_alphabetical_ordering ... ok
test plugins::sort_attrs::tests::test_xmlns_front_ordering ... ok
test plugins::sort_defs_children::tests::test_complex_sorting ... ok
test plugins::sort_defs_children::tests::test_empty_defs ... ok
test plugins::sort_defs_children::tests::test_nested_defs ... ok
test plugins::sort_defs_children::tests::test_plugin_name_and_description ... ok
test plugins::sort_defs_children::tests::test_preserve_non_element_nodes ... ok
test plugins::sort_defs_children::tests::test_sort_by_frequency ... ok
test plugins::sort_defs_children::tests::test_sort_alphabetically ... ok
test plugins::sort_defs_children::tests::test_sort_by_name_length ... ok
test stringifier::tests::test_attribute_escaping ... ok
test stringifier::tests::test_quote_styles ... ok
test stringifier::tests::test_self_closing_elements ... ok
test stringifier::tests::test_stringify_pretty ... ok
test stringifier::tests::test_stringify_simple_element ... ok
test stringifier::tests::test_stringify_with_comment ... ok
test stringifier::tests::test_stringify_with_text ... ok

test result: ok. 347 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.11s

     Running unittests src/bin/svgn.rs (target/debug/deps/svgn-9d824e1677c63e85)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/fixture_tests.rs (target/debug/deps/fixture_tests-61dec97e88c6a136)

running 5 tests
test test_remove_comments_with_params_fixture ... ok
test test_remove_empty_attrs_fixture ... ok
test test_multipass_optimization ... ok
test test_cleanup_attrs_fixture ... ok
test test_convert_colors_fixture ... ok

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.12s

     Running tests/integration_test.rs (target/debug/deps/integration_test-5ec61ae03a75a53e)

running 4 tests
test test_error_handling_invalid_svg ... ok
test test_pretty_print_formatting ... ok
test test_full_optimization_pipeline ... ok
test test_default_preset_pipeline ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.22s

     Running tests/plugins.rs (target/debug/deps/plugins-13b20166ef7d5b9d)

running 5 tests
test test_remove_comments_02_preserve_legal ... ok
test test_remove_metadata_01 ... ok
test test_remove_comments_01 ... ok
test test_remove_title_01 ... ok
test test_remove_comments_03_no_preserve ... ok

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/svgo_compatibility_tests.rs (target/debug/deps/svgo_compatibility_tests-2060e6f4702013dd)

running 16 tests
test test_remove_title ... ok
test test_remove_metadata ... ok
test test_remove_dimensions_with_viewbox ... ok
test test_optimization_info ... ok
test test_convert_ellipse_to_circle ... ok
test test_remove_comments_basic ... ok
test test_remove_comments_preserve_legal ... ok
test test_remove_empty_attrs ... ok
test test_pretty_print_vs_minified ... ok
test test_multiple_plugins_pipeline ... ok
test test_error_resilience ... ok
test test_multipass_optimization ... ok
test test_plugin_with_params ... ok
test test_cleanup_ids_minification ... ok
test test_cleanup_attrs_basic ... ok
test test_convert_colors_basic ... ok

test result: ok. 16 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s

   Doc-tests svgn

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

Running linter (clippy)...
   Compiling svgn v1.2.3 (/Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 4.39s
Checking code formatting...
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/examples/test_css_debug.rs:1:
 use lightningcss::{
[31m-    stylesheet::{ParserOptions, StyleSheet},
(B[m     rules::CssRule,
[32m+    stylesheet::{ParserOptions, StyleSheet},
(B[m };
 
 fn main() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/examples/test_css_debug.rs:12:
             font-size: 16px;
         }
     "#;
[31m-    
(B[m[32m+
(B[m     let stylesheet = StyleSheet::<'_, '_>::parse(css, ParserOptions::default()).unwrap();
[31m-    
(B[m[32m+
(B[m     for rule in &stylesheet.rules.0 {
         if let CssRule::Style(style_rule) = rule {
             for property in &style_rule.declarations.declarations {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/examples/test_css_debug.rs:23:
         }
     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:192:
     if let Some(indent) = matches.get_one::<usize>("indent") {
         config.js2svg.indent = *indent;
     }
[31m-    
(B[m[32m+
(B[m     if let Some(eol) = matches.get_one::<String>("eol") {
         use svgn::config::LineEnding;
         config.js2svg.eol = match eol.as_str() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:201:
             _ => unreachable!(), // Clap validates this
         };
     }
[31m-    
(B[m[32m+
(B[m     if matches.get_flag("final-newline") {
         config.js2svg.final_newline = true;
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:418:
                 let result = optimize_with_config(&content, file_config)?;
 
                 let input_path = Path::new(input_file);
[31m-                let file_name = input_path
(B[m[31m-                    .file_name()
(B[m[31m-                    .ok_or("Invalid input file path")?;
(B[m[32m+                let file_name = input_path.file_name().ok_or("Invalid input file path")?;
(B[m                 let output_path = Path::new(&output_dir).join(file_name);
 
                 fs::write(&output_path, &result.data)?;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:565:
 
             if path.is_dir() {
                 dirs_to_process.push(path);
[31m-            } else if path.is_file() && is_svg_file(&path) && !is_excluded(&path, exclude_patterns)? {
(B[m[32m+            } else if path.is_file() && is_svg_file(&path) && !is_excluded(&path, exclude_patterns)?
(B[m[32m+            {
(B[m                 svg_files.push(path);
             }
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:602:
     // Apply precision to all plugins that support it
     for plugin_config in &mut config.plugins {
         match plugin_config.name.as_str() {
[31m-            "cleanupNumericValues" | "cleanupListOfValues" | "convertPathData" | "convertTransform" => {
(B[m[32m+            "cleanupNumericValues"
(B[m[32m+            | "cleanupListOfValues"
(B[m[32m+            | "convertPathData"
(B[m[32m+            | "convertTransform" => {
(B[m                 let params = plugin_config
                     .params
                     .get_or_insert_with(|| serde_json::json!({}));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/bin/svgn.rs:649:
         format!("{:.1} {}", size, UNITS[i])
     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/config.rs:74:
     /// Quote attributes (always, never, auto)
     #[serde(default = "default_quote_attrs")]
     pub quote_attrs: QuoteAttrsStyle,
[31m-    
(B[m[32m+
(B[m     /// Line ending style
     #[serde(default)]
     pub eol: LineEnding,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/config.rs:81:
[31m-    
(B[m[32m+
(B[m     /// Ensure final newline
     #[serde(default)]
     pub final_newline: bool,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/lib.rs:18:
 // Re-export main types
 pub use ast::{Document, Element, Node};
 pub use config::Config;
[31m-pub use optimizer::{optimize, optimize_default, optimize_with_config, OptimizationResult, OptimizeOptions};
(B[m[32m+pub use optimizer::{
(B[m[32m+    optimize, optimize_default, optimize_with_config, OptimizationResult, OptimizeOptions,
(B[m[32m+};
(B[m pub use plugin::{Plugin, PluginConfig, PluginRegistry};
 
 /// Library version (from git tag or Cargo.toml)
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:183:
             (CommandType::ClosePath, _) => 'z',
         }
     }
[31m-
(B[m }
 
 /// Parse a path data string into commands
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:215:
 
                 // Parse new command
                 let (cmd_type, is_absolute) = parse_command_char(ch)?;
[31m-                
(B[m[32m+
(B[m                 if cmd_type == CommandType::ClosePath {
                     commands.push(PathCommand {
                         cmd_type,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:320:
     // Process params in chunks
     while params.len() >= expected {
         let chunk: Vec<f64> = params.drain(..expected).collect();
[31m-        
(B[m[32m+
(B[m         // Special case: MoveTo followed by implicit LineTo
         let actual_cmd_type = if cmd_type == CommandType::MoveTo && !commands.is_empty() {
             CommandType::LineTo
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:344:
 }
 
 /// Optimize path data string
[31m-fn optimize_path_data(
(B[m[31m-    path_data: &str,
(B[m[31m-    config: &PathOptimizationConfig,
(B[m[31m-) -> Result<String, String> {
(B[m[32m+fn optimize_path_data(path_data: &str, config: &PathOptimizationConfig) -> Result<String, String> {
(B[m     // Parse path data
     let mut commands = parse_path_data(path_data)?;
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:482:
     }
 
     // Convert back to string
[31m-    stringify_commands(&commands, config.float_precision, config.utilize_absolute, config.leading_zero, config.negative_extra_space)
(B[m[32m+    stringify_commands(
(B[m[32m+        &commands,
(B[m[32m+        config.float_precision,
(B[m[32m+        config.utilize_absolute,
(B[m[32m+        config.leading_zero,
(B[m[32m+        config.negative_extra_space,
(B[m[32m+    )
(B[m }
 
 /// Remove useless commands (e.g., LineTo to current position)
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:645:
 }
 
 /// Determine if absolute coordinates are more efficient
[31m-fn should_use_absolute(_cmd: &PathCommand, _current_x: f64, _current_y: f64, _precision: u8) -> bool {
(B[m[32m+fn should_use_absolute(
(B[m[32m+    _cmd: &PathCommand,
(B[m[32m+    _current_x: f64,
(B[m[32m+    _current_y: f64,
(B[m[32m+    _precision: u8,
(B[m[32m+) -> bool {
(B[m     // For now, always use absolute
     // TODO: Implement size comparison
     true
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:773:
 fn format_number(value: f64, precision: u8, leading_zero: bool) -> String {
     // Format with precision
     let formatted = format!("{:.1$}", value, precision as usize);
[31m-    
(B[m[32m+
(B[m     // Remove trailing zeros and decimal point if integer
     let mut trimmed = formatted.trim_end_matches('0').trim_end_matches('.');
[31m-    
(B[m[32m+
(B[m     // Handle edge cases
     if trimmed.is_empty() || trimmed == "-" {
         return "0".to_string();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:783:
     }
[31m-    
(B[m[32m+
(B[m     // Remove leading zero if requested
     if !leading_zero && trimmed.starts_with("0.") {
         trimmed = &trimmed[1..];
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:788:
     } else if !leading_zero && trimmed.starts_with("-0.") {
         return format!("-{}", &trimmed[2..]);
     }
[31m-    
(B[m[32m+
(B[m     trimmed.to_string()
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_path_data.rs:843:
         assert!(!optimized.contains("L10 10"));
     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:9:
 
 use crate::ast::{Document, Element, Node};
 use crate::plugin::{Plugin, PluginInfo, PluginResult};
[31m-use serde_json::Value;
(B[m use nalgebra::Matrix3;
[32m+use serde_json::Value;
(B[m use std::f64::consts::PI;
 
 /// Plugin to convert and optimize transform attributes
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:68:
     /// Parse parameters from JSON value
     pub fn from_value(value: Option<&Value>) -> PluginResult<Self> {
         let mut params = Self::default();
[31m-        
(B[m[32m+
(B[m         if let Some(Value::Object(map)) = value {
             if let Some(Value::Bool(v)) = map.get("convertToShorts") {
                 params.convert_to_shorts = *v;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:113:
                 params.negative_extra_space = *v;
             }
         }
[31m-        
(B[m[32m+
(B[m         Ok(params)
     }
 }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:130:
     pub fn new(name: String, data: Vec<f64>) -> Self {
         Self { name, data }
     }
[31m-    
(B[m[32m+
(B[m     /// Convert to matrix representation
     pub fn to_matrix(&self) -> Matrix3<f64> {
         match self.name.as_str() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:137:
             "matrix" => {
                 if self.data.len() >= 6 {
                     Matrix3::new(
[31m-                        self.data[0], self.data[2], self.data[4],
(B[m[31m-                        self.data[1], self.data[3], self.data[5],
(B[m[31m-                        0.0, 0.0, 1.0,
(B[m[32m+                        self.data[0],
(B[m[32m+                        self.data[2],
(B[m[32m+                        self.data[4],
(B[m[32m+                        self.data[1],
(B[m[32m+                        self.data[3],
(B[m[32m+                        self.data[5],
(B[m[32m+                        0.0,
(B[m[32m+                        0.0,
(B[m[32m+                        1.0,
(B[m                     )
                 } else {
                     Matrix3::identity()
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:148:
             "translate" => {
                 let tx = self.data.first().copied().unwrap_or(0.0);
                 let ty = self.data.get(1).copied().unwrap_or(0.0);
[31m-                Matrix3::new(
(B[m[31m-                    1.0, 0.0, tx,
(B[m[31m-                    0.0, 1.0, ty,
(B[m[31m-                    0.0, 0.0, 1.0,
(B[m[31m-                )
(B[m[32m+                Matrix3::new(1.0, 0.0, tx, 0.0, 1.0, ty, 0.0, 0.0, 1.0)
(B[m             }
             "scale" => {
                 let sx = self.data.first().copied().unwrap_or(1.0);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:159:
                 let sy = self.data.get(1).copied().unwrap_or(sx);
[31m-                Matrix3::new(
(B[m[31m-                    sx, 0.0, 0.0,
(B[m[31m-                    0.0, sy, 0.0,
(B[m[31m-                    0.0, 0.0, 1.0,
(B[m[31m-                )
(B[m[32m+                Matrix3::new(sx, 0.0, 0.0, 0.0, sy, 0.0, 0.0, 0.0, 1.0)
(B[m             }
             "rotate" => {
                 let angle = self.data.first().copied().unwrap_or(0.0) * PI / 180.0;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:168:
                 let cx = self.data.get(1).copied().unwrap_or(0.0);
                 let cy = self.data.get(2).copied().unwrap_or(0.0);
[31m-                
(B[m[32m+
(B[m                 let cos_a = angle.cos();
                 let sin_a = angle.sin();
[31m-                
(B[m[32m+
(B[m                 if cx == 0.0 && cy == 0.0 {
[31m-                    Matrix3::new(
(B[m[31m-                        cos_a, -sin_a, 0.0,
(B[m[31m-                        sin_a, cos_a, 0.0,
(B[m[31m-                        0.0, 0.0, 1.0,
(B[m[31m-                    )
(B[m[32m+                    Matrix3::new(cos_a, -sin_a, 0.0, sin_a, cos_a, 0.0, 0.0, 0.0, 1.0)
(B[m                 } else {
                     // rotate(angle, cx, cy) = translate(cx, cy) rotate(angle) translate(-cx, -cy)
[31m-                    let translate_to = Matrix3::new(
(B[m[31m-                        1.0, 0.0, cx,
(B[m[31m-                        0.0, 1.0, cy,
(B[m[31m-                        0.0, 0.0, 1.0,
(B[m[31m-                    );
(B[m[31m-                    let rotate = Matrix3::new(
(B[m[31m-                        cos_a, -sin_a, 0.0,
(B[m[31m-                        sin_a, cos_a, 0.0,
(B[m[31m-                        0.0, 0.0, 1.0,
(B[m[31m-                    );
(B[m[31m-                    let translate_back = Matrix3::new(
(B[m[31m-                        1.0, 0.0, -cx,
(B[m[31m-                        0.0, 1.0, -cy,
(B[m[31m-                        0.0, 0.0, 1.0,
(B[m[31m-                    );
(B[m[32m+                    let translate_to = Matrix3::new(1.0, 0.0, cx, 0.0, 1.0, cy, 0.0, 0.0, 1.0);
(B[m[32m+                    let rotate = Matrix3::new(cos_a, -sin_a, 0.0, sin_a, cos_a, 0.0, 0.0, 0.0, 1.0);
(B[m[32m+                    let translate_back = Matrix3::new(1.0, 0.0, -cx, 0.0, 1.0, -cy, 0.0, 0.0, 1.0);
(B[m                     translate_to * rotate * translate_back
                 }
             }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:200:
             "skewX" => {
                 let angle = self.data.first().copied().unwrap_or(0.0) * PI / 180.0;
[31m-                Matrix3::new(
(B[m[31m-                    1.0, angle.tan(), 0.0,
(B[m[31m-                    0.0, 1.0, 0.0,
(B[m[31m-                    0.0, 0.0, 1.0,
(B[m[31m-                )
(B[m[32m+                Matrix3::new(1.0, angle.tan(), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)
(B[m             }
             "skewY" => {
                 let angle = self.data.first().copied().unwrap_or(0.0) * PI / 180.0;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:210:
[31m-                Matrix3::new(
(B[m[31m-                    1.0, 0.0, 0.0,
(B[m[31m-                    angle.tan(), 1.0, 0.0,
(B[m[31m-                    0.0, 0.0, 1.0,
(B[m[31m-                )
(B[m[32m+                Matrix3::new(1.0, 0.0, 0.0, angle.tan(), 1.0, 0.0, 0.0, 0.0, 1.0)
(B[m             }
             _ => Matrix3::identity(),
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:222:
     /// Parse transform string to transform operations
     pub fn parse_transform_string(&self, transform_str: &str) -> Vec<Transform> {
         let mut transforms = Vec::new();
[31m-        
(B[m[32m+
(B[m         // Regex pattern to match transform functions
[31m-        let re = regex::Regex::new(r"\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*([^)]*)\s*\)").unwrap();
(B[m[31m-        
(B[m[32m+        let re = regex::Regex::new(
(B[m[32m+            r"\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*([^)]*)\s*\)",
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         for cap in re.captures_iter(transform_str) {
             if let (Some(name_match), Some(data_match)) = (cap.get(1), cap.get(2)) {
                 let name = name_match.as_str().to_string();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:232:
                 let data_str = data_match.as_str();
[31m-                
(B[m[32m+
(B[m                 // Parse numeric values
                 let data: Vec<f64> = data_str
                     .split(',')
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:237:
                     .flat_map(|s| s.split_whitespace())
                     .filter_map(|s| s.parse().ok())
                     .collect();
[31m-                
(B[m[32m+
(B[m                 transforms.push(Transform::new(name, data));
             }
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:244:
[31m-        
(B[m[32m+
(B[m         transforms
     }
[31m-    
(B[m[32m+
(B[m     /// Convert transforms to optimized form
[31m-    pub fn optimize_transforms(&self, transforms: Vec<Transform>, params: &ConvertTransformParams) -> Vec<Transform> {
(B[m[32m+    pub fn optimize_transforms(
(B[m[32m+        &self,
(B[m[32m+        transforms: Vec<Transform>,
(B[m[32m+        params: &ConvertTransformParams,
(B[m[32m+    ) -> Vec<Transform> {
(B[m         if transforms.is_empty() {
             return transforms;
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:253:
[31m-        
(B[m[32m+
(B[m         let mut result = transforms;
[31m-        
(B[m[32m+
(B[m         // Collapse into one matrix if requested
         if params.collapse_into_one && result.len() > 1 {
             let mut combined_matrix = Matrix3::identity();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:261:
             }
             result = vec![self.matrix_to_transform(combined_matrix, params)];
         }
[31m-        
(B[m[32m+
(B[m         // Convert to shorts if requested
         if params.convert_to_shorts {
[31m-            result = result.into_iter().map(|t| self.convert_to_short(t, params)).collect();
(B[m[32m+            result = result
(B[m[32m+                .into_iter()
(B[m[32m+                .map(|t| self.convert_to_short(t, params))
(B[m[32m+                .collect();
(B[m         }
[31m-        
(B[m[32m+
(B[m         // Remove useless transforms
         if params.remove_useless {
             result = self.remove_useless_transforms(result);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:273:
         }
[31m-        
(B[m[32m+
(B[m         result
     }
[31m-    
(B[m[32m+
(B[m     /// Convert matrix to transform function
[31m-    fn matrix_to_transform(&self, matrix: Matrix3<f64>, params: &ConvertTransformParams) -> Transform {
(B[m[32m+    fn matrix_to_transform(
(B[m[32m+        &self,
(B[m[32m+        matrix: Matrix3<f64>,
(B[m[32m+        params: &ConvertTransformParams,
(B[m[32m+    ) -> Transform {
(B[m         let a = matrix[(0, 0)];
         let b = matrix[(1, 0)];
         let c = matrix[(0, 1)];
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:283:
         let d = matrix[(1, 1)];
         let e = matrix[(0, 2)];
         let f = matrix[(1, 2)];
[31m-        
(B[m[32m+
(B[m         // Check for simple transforms first
         if params.matrix_to_transform {
             // Pure translation
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:290:
             if a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0 {
                 return Transform::new("translate".to_string(), vec![e, f]);
             }
[31m-            
(B[m[32m+
(B[m             // Pure scale
             if b == 0.0 && c == 0.0 && e == 0.0 && f == 0.0 {
                 return Transform::new("scale".to_string(), vec![a, d]);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:297:
             }
[31m-            
(B[m[32m+
(B[m             // Pure rotation (no translation)
             if e == 0.0 && f == 0.0 && (a * a + b * b - 1.0).abs() < 1e-10 {
                 let angle = b.atan2(a) * 180.0 / PI;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:302:
                 return Transform::new("rotate".to_string(), vec![angle]);
             }
         }
[31m-        
(B[m[32m+
(B[m         // Fallback to matrix
         Transform::new("matrix".to_string(), vec![a, b, c, d, e, f])
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:309:
[31m-    
(B[m[32m+
(B[m     /// Convert transform to shorter notation if possible
     fn convert_to_short(&self, transform: Transform, params: &ConvertTransformParams) -> Transform {
         match transform.name.as_str() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:318:
                 }
             }
             "scale" => {
[31m-                if params.short_scale && transform.data.len() >= 2 && transform.data[0] == transform.data[1] {
(B[m[32m+                if params.short_scale
(B[m[32m+                    && transform.data.len() >= 2
(B[m[32m+                    && transform.data[0] == transform.data[1]
(B[m[32m+                {
(B[m                     Transform::new("scale".to_string(), vec![transform.data[0]])
                 } else {
                     transform
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:327:
             _ => transform,
         }
     }
[31m-    
(B[m[32m+
(B[m     /// Remove useless transforms
     fn remove_useless_transforms(&self, transforms: Vec<Transform>) -> Vec<Transform> {
[31m-        transforms.into_iter().filter(|t| !self.is_useless_transform(t)).collect()
(B[m[32m+        transforms
(B[m[32m+            .into_iter()
(B[m[32m+            .filter(|t| !self.is_useless_transform(t))
(B[m[32m+            .collect()
(B[m     }
[31m-    
(B[m[32m+
(B[m     /// Check if transform is useless (identity)
     fn is_useless_transform(&self, transform: &Transform) -> bool {
         match transform.name.as_str() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:339:
             "translate" => {
[31m-                transform.data.is_empty() || 
(B[m[31m-                (!transform.data.is_empty() && transform.data[0] == 0.0 &&
(B[m[31m-                 (transform.data.len() == 1 || transform.data[1] == 0.0))
(B[m[32m+                transform.data.is_empty()
(B[m[32m+                    || (!transform.data.is_empty()
(B[m[32m+                        && transform.data[0] == 0.0
(B[m[32m+                        && (transform.data.len() == 1 || transform.data[1] == 0.0))
(B[m             }
             "scale" => {
[31m-                transform.data.is_empty() ||
(B[m[31m-                (!transform.data.is_empty() && transform.data[0] == 1.0 &&
(B[m[31m-                 (transform.data.len() == 1 || transform.data[1] == 1.0))
(B[m[32m+                transform.data.is_empty()
(B[m[32m+                    || (!transform.data.is_empty()
(B[m[32m+                        && transform.data[0] == 1.0
(B[m[32m+                        && (transform.data.len() == 1 || transform.data[1] == 1.0))
(B[m             }
[31m-            "rotate" => {
(B[m[31m-                transform.data.is_empty() || transform.data[0] == 0.0
(B[m[31m-            }
(B[m[31m-            "skewX" | "skewY" => {
(B[m[31m-                transform.data.is_empty() || transform.data[0] == 0.0
(B[m[31m-            }
(B[m[32m+            "rotate" => transform.data.is_empty() || transform.data[0] == 0.0,
(B[m[32m+            "skewX" | "skewY" => transform.data.is_empty() || transform.data[0] == 0.0,
(B[m             "matrix" => {
                 transform.data.len() >= 6 &&
                 transform.data[0] == 1.0 && // a
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:359:
                 transform.data[2] == 0.0 && // c
                 transform.data[3] == 1.0 && // d
                 transform.data[4] == 0.0 && // e
[31m-                transform.data[5] == 0.0    // f
(B[m[32m+                transform.data[5] == 0.0 // f
(B[m             }
             _ => false,
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:366:
     }
[31m-    
(B[m[32m+
(B[m     /// Convert transforms back to string
[31m-    pub fn transforms_to_string(&self, transforms: Vec<Transform>, params: &ConvertTransformParams) -> String {
(B[m[32m+    pub fn transforms_to_string(
(B[m[32m+        &self,
(B[m[32m+        transforms: Vec<Transform>,
(B[m[32m+        params: &ConvertTransformParams,
(B[m[32m+    ) -> String {
(B[m         if transforms.is_empty() {
             return String::new();
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:373:
[31m-        
(B[m[31m-        transforms.iter().map(|t| {
(B[m[31m-            let data_str = t.data.iter()
(B[m[31m-                .map(|&val| self.format_number(val, params))
(B[m[31m-                .collect::<Vec<_>>()
(B[m[31m-                .join(",");
(B[m[31m-            format!("{}({})", t.name, data_str)
(B[m[31m-        }).collect::<Vec<_>>().join(" ")
(B[m[32m+
(B[m[32m+        transforms
(B[m[32m+            .iter()
(B[m[32m+            .map(|t| {
(B[m[32m+                let data_str = t
(B[m[32m+                    .data
(B[m[32m+                    .iter()
(B[m[32m+                    .map(|&val| self.format_number(val, params))
(B[m[32m+                    .collect::<Vec<_>>()
(B[m[32m+                    .join(",");
(B[m[32m+                format!("{}({})", t.name, data_str)
(B[m[32m+            })
(B[m[32m+            .collect::<Vec<_>>()
(B[m[32m+            .join(" ")
(B[m     }
[31m-    
(B[m[32m+
(B[m     /// Format number according to precision settings
     fn format_number(&self, val: f64, params: &ConvertTransformParams) -> String {
         let precision = params.float_precision;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:386:
[31m-        
(B[m[32m+
(B[m         let formatted = if precision == 0 {
             format!("{:.0}", val)
         } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:390:
             format!("{:.prec$}", val, prec = precision as usize)
         };
[31m-        
(B[m[32m+
(B[m         // Remove trailing zeros after decimal point
         if formatted.contains('.') {
[31m-            formatted.trim_end_matches('0').trim_end_matches('.').to_string()
(B[m[32m+            formatted
(B[m[32m+                .trim_end_matches('0')
(B[m[32m+                .trim_end_matches('.')
(B[m[32m+                .to_string()
(B[m         } else {
             formatted
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:399:
     }
[31m-    
(B[m[32m+
(B[m     /// Process element recursively
     fn process_element(&self, element: &mut Element, params: &ConvertTransformParams) {
         // Process transform attribute
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:404:
         if let Some(transform_value) = element.attributes.get("transform").cloned() {
             let transforms = self.parse_transform_string(&transform_value);
             let optimized = self.optimize_transforms(transforms, params);
[31m-            
(B[m[32m+
(B[m             if optimized.is_empty() {
                 element.attributes.shift_remove("transform");
             } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:411:
                 let new_value = self.transforms_to_string(optimized, params);
[31m-                element.attributes.insert("transform".to_string(), new_value);
(B[m[32m+                element
(B[m[32m+                    .attributes
(B[m[32m+                    .insert("transform".to_string(), new_value);
(B[m             }
         }
[31m-        
(B[m[32m+
(B[m         // Process gradientTransform attribute
         if let Some(transform_value) = element.attributes.get("gradientTransform").cloned() {
             let transforms = self.parse_transform_string(&transform_value);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:419:
             let optimized = self.optimize_transforms(transforms, params);
[31m-            
(B[m[32m+
(B[m             if optimized.is_empty() {
                 element.attributes.shift_remove("gradientTransform");
             } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:424:
                 let new_value = self.transforms_to_string(optimized, params);
[31m-                element.attributes.insert("gradientTransform".to_string(), new_value);
(B[m[32m+                element
(B[m[32m+                    .attributes
(B[m[32m+                    .insert("gradientTransform".to_string(), new_value);
(B[m             }
         }
[31m-        
(B[m[32m+
(B[m         // Process patternTransform attribute
         if let Some(transform_value) = element.attributes.get("patternTransform").cloned() {
             let transforms = self.parse_transform_string(&transform_value);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:432:
             let optimized = self.optimize_transforms(transforms, params);
[31m-            
(B[m[32m+
(B[m             if optimized.is_empty() {
                 element.attributes.shift_remove("patternTransform");
             } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:437:
                 let new_value = self.transforms_to_string(optimized, params);
[31m-                element.attributes.insert("patternTransform".to_string(), new_value);
(B[m[32m+                element
(B[m[32m+                    .attributes
(B[m[32m+                    .insert("patternTransform".to_string(), new_value);
(B[m             }
         }
[31m-        
(B[m[32m+
(B[m         // Process children
         for child in &mut element.children {
             if let Node::Element(child_element) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:452:
     fn name(&self) -> &'static str {
         "convertTransform"
     }
[31m-    
(B[m[32m+
(B[m     fn description(&self) -> &'static str {
         "collapses multiple transformations and optimizes it"
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:459:
[31m-    
(B[m[31m-    fn apply(&mut self, document: &mut Document, _plugin_info: &PluginInfo, params: Option<&Value>) -> PluginResult<()> {
(B[m[32m+
(B[m[32m+    fn apply(
(B[m[32m+        &mut self,
(B[m[32m+        document: &mut Document,
(B[m[32m+        _plugin_info: &PluginInfo,
(B[m[32m+        params: Option<&Value>,
(B[m[32m+    ) -> PluginResult<()> {
(B[m         let params = ConvertTransformParams::from_value(params)?;
         self.process_element(&mut document.root, &params);
         Ok(())
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:464:
     }
[31m-    
(B[m[32m+
(B[m     fn validate_params(&self, params: Option<&Value>) -> PluginResult<()> {
         // Try to parse parameters to validate them
         ConvertTransformParams::from_value(params)?;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:486:
             attributes: IndexMap::new(),
             children: vec![],
         };
[31m-        element.attributes.insert("transform".to_string(), transform.to_string());
(B[m         element
[32m+            .attributes
(B[m[32m+            .insert("transform".to_string(), transform.to_string());
(B[m[32m+        element
(B[m     }
 
     #[test]
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:494:
     fn test_parse_transform_string() {
         let plugin = ConvertTransformPlugin;
         let transforms = plugin.parse_transform_string("translate(10,20) scale(2)");
[31m-        
(B[m[32m+
(B[m         assert_eq!(transforms.len(), 2);
         assert_eq!(transforms[0].name, "translate");
         assert_eq!(transforms[0].data, vec![10.0, 20.0]);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:505:
     #[test]
     fn test_remove_useless_transforms() {
         let plugin = ConvertTransformPlugin;
[31m-        
(B[m[32m+
(B[m         // Identity transforms
[31m-        assert!(plugin.is_useless_transform(&Transform::new("translate".to_string(), vec![0.0, 0.0])));
(B[m[32m+        assert!(
(B[m[32m+            plugin.is_useless_transform(&Transform::new("translate".to_string(), vec![0.0, 0.0]))
(B[m[32m+        );
(B[m         assert!(plugin.is_useless_transform(&Transform::new("scale".to_string(), vec![1.0, 1.0])));
         assert!(plugin.is_useless_transform(&Transform::new("rotate".to_string(), vec![0.0])));
[31m-        
(B[m[32m+
(B[m         // Non-identity transforms
[31m-        assert!(!plugin.is_useless_transform(&Transform::new("translate".to_string(), vec![10.0, 0.0])));
(B[m[32m+        assert!(
(B[m[32m+            !plugin.is_useless_transform(&Transform::new("translate".to_string(), vec![10.0, 0.0]))
(B[m[32m+        );
(B[m         assert!(!plugin.is_useless_transform(&Transform::new("scale".to_string(), vec![2.0, 1.0])));
         assert!(!plugin.is_useless_transform(&Transform::new("rotate".to_string(), vec![45.0])));
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:522:
         let mut doc = Document::default();
         let element = create_test_element_with_transform("translate(0,0)");
         doc.root = element;
[31m-        
(B[m[32m+
(B[m         let mut plugin = ConvertTransformPlugin;
         let plugin_info = PluginInfo::default();
         let params = json!({});
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:529:
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Transform should be removed
         assert!(!doc.root.attributes.contains_key("transform"));
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:538:
         let mut doc = Document::default();
         let element = create_test_element_with_transform("translate(10,0)");
         doc.root = element;
[31m-        
(B[m[32m+
(B[m         let mut plugin = ConvertTransformPlugin;
         let plugin_info = PluginInfo::default();
         let params = json!({"shortTranslate": true});
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/convert_transform.rs:545:
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Should be shortened to single parameter
[31m-        assert_eq!(doc.root.attributes.get("transform"), Some(&"translate(10)".to_string()));
(B[m[32m+        assert_eq!(
(B[m[32m+            doc.root.attributes.get("transform"),
(B[m[32m+            Some(&"translate(10)".to_string())
(B[m[32m+        );
(B[m     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:8:
 pub fn convert_css_property(property: &Property) -> Option<(String, String)> {
     // For now, use a simplified approach that extracts from debug strings
     let debug_str = format!("{:?}", property);
[31m-    
(B[m[32m+
(B[m     // Try to match common SVG properties
     if debug_str.starts_with("Fill(") {
         Some(("fill".to_string(), extract_color_from_debug(&debug_str)))
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:15:
[31m-    } else if debug_str.starts_with("Stroke(") && !debug_str.contains("Width") && !debug_str.contains("Opacity") {
(B[m[32m+    } else if debug_str.starts_with("Stroke(")
(B[m[32m+        && !debug_str.contains("Width")
(B[m[32m+        && !debug_str.contains("Opacity")
(B[m[32m+    {
(B[m         Some(("stroke".to_string(), extract_color_from_debug(&debug_str)))
     } else if debug_str.starts_with("Opacity(") {
[31m-        Some(("opacity".to_string(), extract_opacity_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "opacity".to_string(),
(B[m[32m+            extract_opacity_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("FillOpacity(") {
[31m-        Some(("fill-opacity".to_string(), extract_opacity_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "fill-opacity".to_string(),
(B[m[32m+            extract_opacity_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("StrokeOpacity(") {
[31m-        Some(("stroke-opacity".to_string(), extract_opacity_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "stroke-opacity".to_string(),
(B[m[32m+            extract_opacity_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("StrokeWidth(") {
[31m-        Some(("stroke-width".to_string(), extract_dimension_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "stroke-width".to_string(),
(B[m[32m+            extract_dimension_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("FontSize(") {
[31m-        Some(("font-size".to_string(), extract_dimension_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "font-size".to_string(),
(B[m[32m+            extract_dimension_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("FontFamily(") {
[31m-        Some(("font-family".to_string(), extract_font_family_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "font-family".to_string(),
(B[m[32m+            extract_font_family_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("FontStyle(") {
[31m-        Some(("font-style".to_string(), extract_font_style_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "font-style".to_string(),
(B[m[32m+            extract_font_style_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("FontWeight(") {
[31m-        Some(("font-weight".to_string(), extract_font_weight_from_debug(&debug_str)))
(B[m[32m+        Some((
(B[m[32m+            "font-weight".to_string(),
(B[m[32m+            extract_font_weight_from_debug(&debug_str),
(B[m[32m+        ))
(B[m     } else if debug_str.starts_with("Transform(") {
         Some(("transform".to_string(), "none".to_string()))
     } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:51:
         if let (Some(r), Some(g), Some(b)) = (
             extract_number_after(debug_str, "red: "),
             extract_number_after(debug_str, "green: "),
[31m-            extract_number_after(debug_str, "blue: ")
(B[m[32m+            extract_number_after(debug_str, "blue: "),
(B[m         ) {
             return format!("rgb({}, {}, {})", r, g, b);
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:99:
     if let Some(start) = s.find(prefix) {
         let after_prefix = &s[start + prefix.len()..];
         // Take digits until we hit a non-digit
[31m-        let num_str: String = after_prefix.chars()
(B[m[32m+        let num_str: String = after_prefix
(B[m[32m+            .chars()
(B[m             .take_while(|c| c.is_ascii_digit())
             .collect();
         num_str.parse().ok()
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:107:
         None
     }
 }
[31m-
(B[m 
 /// Extract dimension value from debug string (for stroke-width, font-size, etc.)
 fn extract_dimension_from_debug(debug_str: &str) -> String {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_converter.rs:144:
     // TODO: Implement proper font weight extraction
     "normal".to_string()
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:3:
 //! CSS selector matching implementation for SVG elements
 
 use crate::ast::{Element, Node};
[31m-use selectors::{Element as SelectorElement, OpaqueElement};
(B[m[32m+use cssparser::ToCss;
(B[m use selectors::attr::{AttrSelectorOperation, CaseSensitivity, NamespaceConstraint};
[31m-use selectors::parser::{SelectorImpl, NonTSPseudoClass, PseudoElement};
(B[m use selectors::matching::{ElementSelectorFlags, MatchingContext};
[31m-use cssparser::ToCss;
(B[m[32m+use selectors::parser::{NonTSPseudoClass, PseudoElement, SelectorImpl};
(B[m[32m+use selectors::{Element as SelectorElement, OpaqueElement};
(B[m use std::fmt;
 
 /// Wrapper for SVG elements to implement selectors::Element trait
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:27:
             index_in_parent: None,
         }
     }
[31m-    
(B[m[32m+
(B[m     /// Create a wrapper with parent information
     pub fn with_parent(element: &'a Element, parent: &'a Element, index: usize) -> Self {
         Self {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:113:
         if let Some(attr_value) = self.element.attributes.get(&local_name.0) {
             match operation {
                 AttrSelectorOperation::Exists => true,
[31m-                AttrSelectorOperation::WithValue { operator, case_sensitivity, value } => {
(B[m[32m+                AttrSelectorOperation::WithValue {
(B[m[32m+                    operator,
(B[m[32m+                    case_sensitivity,
(B[m[32m+                    value,
(B[m[32m+                } => {
(B[m                     use selectors::attr::AttrSelectorOperator;
                     match operator {
[31m-                        AttrSelectorOperator::Equal => {
(B[m[31m-                            match case_sensitivity {
(B[m[31m-                                CaseSensitivity::CaseSensitive => attr_value == &value.0,
(B[m[31m-                                CaseSensitivity::AsciiCaseInsensitive => {
(B[m[31m-                                    attr_value.eq_ignore_ascii_case(&value.0)
(B[m[31m-                                }
(B[m[32m+                        AttrSelectorOperator::Equal => match case_sensitivity {
(B[m[32m+                            CaseSensitivity::CaseSensitive => attr_value == &value.0,
(B[m[32m+                            CaseSensitivity::AsciiCaseInsensitive => {
(B[m[32m+                                attr_value.eq_ignore_ascii_case(&value.0)
(B[m                             }
[31m-                        }
(B[m[32m+                        },
(B[m                         AttrSelectorOperator::Includes => {
[31m-                            attr_value.split_whitespace().any(|word| {
(B[m[31m-                                match case_sensitivity {
(B[m[32m+                            attr_value
(B[m[32m+                                .split_whitespace()
(B[m[32m+                                .any(|word| match case_sensitivity {
(B[m                                     CaseSensitivity::CaseSensitive => word == value.0,
[31m-                                    CaseSensitivity::AsciiCaseInsensitive => word.eq_ignore_ascii_case(&value.0),
(B[m[31m-                                }
(B[m[31m-                            })
(B[m[32m+                                    CaseSensitivity::AsciiCaseInsensitive => {
(B[m[32m+                                        word.eq_ignore_ascii_case(&value.0)
(B[m[32m+                                    }
(B[m[32m+                                })
(B[m                         }
                         AttrSelectorOperator::DashMatch => {
[31m-                            attr_value == &value.0 || attr_value.starts_with(&format!("{}-", value.0))
(B[m[32m+                            attr_value == &value.0
(B[m[32m+                                || attr_value.starts_with(&format!("{}-", value.0))
(B[m                         }
[31m-                        AttrSelectorOperator::Prefix => {
(B[m[31m-                            attr_value.starts_with(&value.0)
(B[m[31m-                        }
(B[m[31m-                        AttrSelectorOperator::Substring => {
(B[m[31m-                            attr_value.contains(&value.0)
(B[m[31m-                        }
(B[m[31m-                        AttrSelectorOperator::Suffix => {
(B[m[31m-                            attr_value.ends_with(&value.0)
(B[m[31m-                        }
(B[m[32m+                        AttrSelectorOperator::Prefix => attr_value.starts_with(&value.0),
(B[m[32m+                        AttrSelectorOperator::Substring => attr_value.contains(&value.0),
(B[m[32m+                        AttrSelectorOperator::Suffix => attr_value.ends_with(&value.0),
(B[m                     }
                 }
             }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:178:
         // SVG elements are not links in the CSS sense
         false
     }
[31m-    
(B[m[31m-    fn has_id(&self, id: &<Self::Impl as SelectorImpl>::Identifier, _case_sensitivity: CaseSensitivity) -> bool {
(B[m[32m+
(B[m[32m+    fn has_id(
(B[m[32m+        &self,
(B[m[32m+        id: &<Self::Impl as SelectorImpl>::Identifier,
(B[m[32m+        _case_sensitivity: CaseSensitivity,
(B[m[32m+    ) -> bool {
(B[m         self.element.attributes.get("id") == Some(&id.0)
     }
[31m-    
(B[m[31m-    fn has_class(&self, name: &<Self::Impl as SelectorImpl>::Identifier, _case_sensitivity: CaseSensitivity) -> bool {
(B[m[31m-        self.element.attributes.get("class").is_some_and(|classes| {
(B[m[31m-            classes.split_whitespace().any(|c| c == name.0)
(B[m[31m-        })
(B[m[32m+
(B[m[32m+    fn has_class(
(B[m[32m+        &self,
(B[m[32m+        name: &<Self::Impl as SelectorImpl>::Identifier,
(B[m[32m+        _case_sensitivity: CaseSensitivity,
(B[m[32m+    ) -> bool {
(B[m[32m+        self.element
(B[m[32m+            .attributes
(B[m[32m+            .get("class")
(B[m[32m+            .is_some_and(|classes| classes.split_whitespace().any(|c| c == name.0))
(B[m     }
[31m-    
(B[m[32m+
(B[m     fn is_part(&self, _name: &<Self::Impl as SelectorImpl>::Identifier) -> bool {
         false
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:199:
     ) -> Option<<Self::Impl as SelectorImpl>::Identifier> {
         None
     }
[31m-    
(B[m[32m+
(B[m     fn is_empty(&self) -> bool {
         // An element is empty if it has no children
         self.element.children.is_empty()
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:206:
     }
[31m-    
(B[m[32m+
(B[m     fn is_root(&self) -> bool {
         // Root is svg element with no parent
         self.element.name == "svg" && self.parent.is_none()
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:211:
     }
[31m-    
(B[m[32m+
(B[m     fn first_element_child(&self) -> Option<Self> {
         // Find first element child
         for (index, child) in self.element.children.iter().enumerate() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:219:
         }
         None
     }
[31m-    
(B[m[32m+
(B[m     fn is_html_slot_element(&self) -> bool {
         false
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:286:
 
 impl NonTSPseudoClass for SvgNonTSPseudoClass {
     type Impl = SvgSelectorImpl;
[31m-    
(B[m[32m+
(B[m     fn is_active_or_hover(&self) -> bool {
         match *self {} // Empty enum
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:293:
[31m-    
(B[m[32m+
(B[m     fn is_user_action_state(&self) -> bool {
         match *self {} // Empty enum
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:323:
 }
 
 /// Check if an element matches a selector
[31m-pub fn element_matches_selector(element: &Element, selector: &selectors::parser::Selector<SvgSelectorImpl>) -> bool {
(B[m[32m+pub fn element_matches_selector(
(B[m[32m+    element: &Element,
(B[m[32m+    selector: &selectors::parser::Selector<SvgSelectorImpl>,
(B[m[32m+) -> bool {
(B[m     let wrapper = SvgElementWrapper::new(element);
[31m-    
(B[m[32m+
(B[m     // For selectors 0.25, we need to manually check selector components
     // This is a simplified implementation
     use selectors::parser::Component;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:332:
[31m-    
(B[m[32m+
(B[m     for component in selector.iter() {
         match component {
             Component::LocalName(local_name) => {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:353:
             _ => {}
         }
     }
[31m-    
(B[m[32m+
(B[m     true
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:363:
     F: FnMut(&Element, Option<&Element>, Option<usize>),
 {
     f(element, parent, None);
[31m-    
(B[m[32m+
(B[m     for (index, child) in element.children.iter().enumerate() {
         if let Node::Element(child_elem) = child {
             walk_element_tree_with_parent_impl(child_elem, Some(element), index, &mut f);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:376:
     parent: Option<&Element>,
     index: usize,
     f: &mut F,
[31m-)
(B[m[31m-where
(B[m[32m+) where
(B[m     F: FnMut(&Element, Option<&Element>, Option<usize>),
 {
     f(element, parent, Some(index));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:384:
[31m-    
(B[m[32m+
(B[m     for (child_index, child) in element.children.iter().enumerate() {
         if let Node::Element(child_elem) = child {
             walk_element_tree_with_parent_impl(child_elem, Some(element), child_index, f);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles/inline_styles_selector.rs:388:
         }
     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:13:
 //! - `usePseudos` (default: true) - Process pseudo-classes and pseudo-elements
 
 use crate::ast::{Document, Element, Node};
[32m+use crate::collections::PRESENTATION_ATTRS;
(B[m use crate::plugin::{Plugin, PluginInfo, PluginResult};
[32m+use indexmap::IndexMap;
(B[m use lightningcss::{
     rules::CssRule,
     stylesheet::{ParserOptions, StyleSheet},
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:20:
 };
[32m+use selectors::parser::{Parser as SelectorParser, SelectorList};
(B[m use serde::{Deserialize, Serialize};
 use serde_json::Value;
[31m-use crate::collections::PRESENTATION_ATTRS;
(B[m[31m-use indexmap::IndexMap;
(B[m use std::collections::{HashMap, HashSet};
[31m-use selectors::parser::{Parser as SelectorParser, SelectorList};
(B[m 
[31m-mod inline_styles_selector;
(B[m mod inline_styles_converter;
[32m+mod inline_styles_selector;
(B[m 
[31m-use inline_styles_selector::{SvgSelectorImpl, element_matches_selector, walk_element_tree_with_parent};
(B[m use inline_styles_converter::convert_css_property;
[32m+use inline_styles_selector::{
(B[m[32m+    element_matches_selector, walk_element_tree_with_parent, SvgSelectorImpl,
(B[m[32m+};
(B[m 
 /// Parameters for the inline styles plugin
 #[derive(Debug, Clone, Serialize, Deserialize)]
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:38:
     /// Inline only rules that match a single element
     #[serde(default = "default_only_matched_once")]
     pub only_matched_once: bool,
[31m-    
(B[m[32m+
(B[m     /// Remove selectors from style sheets when inlined
     #[serde(default = "default_remove_matched_selectors")]
     pub remove_matched_selectors: bool,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:45:
[31m-    
(B[m[32m+
(B[m     /// Process media queries
     #[serde(default = "default_use_mqs")]
     pub use_mqs: bool,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:49:
[31m-    
(B[m[32m+
(B[m     /// Process pseudo-classes and pseudo-elements
     #[serde(default = "default_use_pseudos")]
     pub use_pseudos: bool,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:63:
     }
 }
 
[31m-fn default_only_matched_once() -> bool { true }
(B[m[31m-fn default_remove_matched_selectors() -> bool { true }
(B[m[31m-fn default_use_mqs() -> bool { true }
(B[m[31m-fn default_use_pseudos() -> bool { true }
(B[m[32m+fn default_only_matched_once() -> bool {
(B[m[32m+    true
(B[m[32m+}
(B[m[32m+fn default_remove_matched_selectors() -> bool {
(B[m[32m+    true
(B[m[32m+}
(B[m[32m+fn default_use_mqs() -> bool {
(B[m[32m+    true
(B[m[32m+}
(B[m[32m+fn default_use_pseudos() -> bool {
(B[m[32m+    true
(B[m[32m+}
(B[m 
 /// Plugin that inlines styles from style elements to inline style attributes
 pub struct InlineStylesPlugin;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:88:
     ) -> PluginResult<()> {
         // Parse parameters
         let params = if let Some(params) = params {
[31m-            serde_json::from_value::<InlineStylesParams>(params.clone())
(B[m[31m-                .unwrap_or_default()
(B[m[32m+            serde_json::from_value::<InlineStylesParams>(params.clone()).unwrap_or_default()
(B[m         } else {
             InlineStylesParams::default()
         };
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:114:
     // First collect all style elements and their CSS rules
     let mut all_css_rules = Vec::new();
     collect_css_rules(element, &mut all_css_rules, params)?;
[31m-    
(B[m[32m+
(B[m     // Sort rules by specificity (lowest to highest)
     all_css_rules.sort_by(|a, b| a.specificity.cmp(&b.specificity));
[31m-    
(B[m[32m+
(B[m     // Track match counts for onlyMatchedOnce
     let mut match_counts = HashMap::new();
     if params.only_matched_once {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:130:
             match_counts.insert(rule.selector.clone(), count);
         }
     }
[31m-    
(B[m[32m+
(B[m     // Apply rules to matching elements (in specificity order)
     for rule in &all_css_rules {
         // Skip if onlyMatchedOnce is true and selector matches multiple elements
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:141:
                 }
             }
         }
[31m-        
(B[m[32m+
(B[m         apply_css_rule(element, rule, params)?;
     }
[31m-    
(B[m[32m+
(B[m     // Clean up if configured
     if params.remove_matched_selectors {
         // Remove empty style elements and unused class/id attributes
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:151:
         remove_empty_style_elements(element);
         cleanup_unused_attributes(element);
     }
[31m-    
(B[m[32m+
(B[m     Ok(())
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:158:
 /// Extract CSS content from a style element
 fn extract_css_content(style_elem: &Element) -> String {
     let mut content = String::new();
[31m-    
(B[m[32m+
(B[m     for child in &style_elem.children {
         match child {
             Node::Text(text) => content.push_str(text),
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:166:
             _ => {}
         }
     }
[31m-    
(B[m[32m+
(B[m     content
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:179:
     if element.name == "style" {
         let css_content = extract_css_content(element);
         if !css_content.is_empty() {
[31m-            if let Ok(stylesheet) = StyleSheet::<'_, '_>::parse(&css_content, ParserOptions::default()) {
(B[m[32m+            if let Ok(stylesheet) =
(B[m[32m+                StyleSheet::<'_, '_>::parse(&css_content, ParserOptions::default())
(B[m[32m+            {
(B[m                 let mut rules = extract_css_rules(&stylesheet);
                 all_rules.append(&mut rules);
             }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:186:
         }
     }
[31m-    
(B[m[32m+
(B[m     // Process children
     for child in &element.children {
         if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:192:
             collect_css_rules(child_elem, all_rules, _params)?;
         }
     }
[31m-    
(B[m[32m+
(B[m     Ok(())
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:207:
     if element_matches_selector_simple(element, selector) {
         *count += 1;
     }
[31m-    
(B[m[32m+
(B[m     for child in &element.children {
         if let Node::Element(child_elem) = child {
             count_matching_elements_impl(child_elem, selector, count);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:216:
 }
 
 /// Count how many elements match a parsed selector list
[31m-fn count_matching_elements_with_selectors(element: &Element, selectors: &SelectorList<SvgSelectorImpl>) -> usize {
(B[m[32m+fn count_matching_elements_with_selectors(
(B[m[32m+    element: &Element,
(B[m[32m+    selectors: &SelectorList<SvgSelectorImpl>,
(B[m[32m+) -> usize {
(B[m     let mut count = 0;
     walk_element_tree_with_parent(element, None, |elem, _parent, _index| {
         for selector in selectors.0.iter() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:247:
 ) -> PluginResult<()> {
     // Check if this element matches the selector
     let matches = if let Some(ref selector_list) = rule.parsed_selectors {
[31m-        selector_list.0.iter().any(|sel| element_matches_selector(element, sel))
(B[m[32m+        selector_list
(B[m[32m+            .0
(B[m[32m+            .iter()
(B[m[32m+            .any(|sel| element_matches_selector(element, sel))
(B[m     } else {
         element_matches_selector_simple(element, &rule.selector)
     };
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:254:
[31m-    
(B[m[32m+
(B[m     if matches {
         // Apply declarations to this element
         apply_declarations_to_element(element, &rule.declarations);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:258:
         // Track which selectors were used
         used_selectors.insert(rule.selector.clone());
[31m-        
(B[m[32m+
(B[m         // Track if we used a class or ID selector
         if rule.selector.starts_with('.') {
             let class_name = &rule.selector[1..];
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:264:
[31m-            element.attributes.insert("data-used-class".to_string(), class_name.to_string());
(B[m[32m+            element
(B[m[32m+                .attributes
(B[m[32m+                .insert("data-used-class".to_string(), class_name.to_string());
(B[m         } else if rule.selector.starts_with('#') {
             let id_name = &rule.selector[1..];
[31m-            element.attributes.insert("data-used-id".to_string(), id_name.to_string());
(B[m[32m+            element
(B[m[32m+                .attributes
(B[m[32m+                .insert("data-used-id".to_string(), id_name.to_string());
(B[m         }
     }
[31m-    
(B[m[32m+
(B[m     // Process children
     for child in &mut element.children {
         if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:274:
             apply_css_rule_and_track(child_elem, rule, _params, used_selectors)?;
         }
     }
[31m-    
(B[m[32m+
(B[m     Ok(())
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:286:
             return classes.split_whitespace().any(|c| c == class_name);
         }
     }
[31m-    
(B[m[32m+
(B[m     // Handle ID selectors
     if let Some(id) = selector.strip_prefix('#') {
         if let Some(elem_id) = element.attributes.get("id") {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:293:
             return elem_id == id;
         }
     }
[31m-    
(B[m[32m+
(B[m     // Handle type selectors
     if !selector.contains(' ') && !selector.contains('[') && !selector.contains(':') {
         return element.name == selector;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:300:
     }
[31m-    
(B[m[32m+
(B[m     false
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:305:
 /// Apply CSS declarations to an element
 fn apply_declarations_to_element(element: &mut Element, declarations: &[(String, String)]) {
     // Get existing style attribute if any
[31m-    let mut inline_styles = parse_inline_style(element.attributes.get("style").cloned().unwrap_or_default());
(B[m[31m-    
(B[m[32m+    let mut inline_styles =
(B[m[32m+        parse_inline_style(element.attributes.get("style").cloned().unwrap_or_default());
(B[m[32m+
(B[m     // Apply new declarations
     for (property, value) in declarations {
         // Only apply if it's a presentation attribute
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:314:
             inline_styles.insert(property.clone(), value.clone());
         }
     }
[31m-    
(B[m[32m+
(B[m     // Build new style attribute
     if !inline_styles.is_empty() {
         let style_str = inline_styles
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:329:
 /// Parse inline style attribute into property-value pairs
 fn parse_inline_style(style: String) -> IndexMap<String, String> {
     let mut styles = IndexMap::new();
[31m-    
(B[m[32m+
(B[m     if !style.is_empty() {
         for declaration in style.split(';') {
             let declaration = declaration.trim();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:340:
             }
         }
     }
[31m-    
(B[m[32m+
(B[m     styles
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:359:
         }
         true
     });
[31m-    
(B[m[32m+
(B[m     // Recursively process children
     for child in &mut element.children {
         if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:378:
                 .split_whitespace()
                 .filter(|c| c != used_class)
                 .collect();
[31m-            
(B[m[32m+
(B[m             if remaining_classes.is_empty() {
                 element.attributes.shift_remove("class");
             } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:385:
[31m-                element.attributes.insert("class".to_string(), remaining_classes.join(" "));
(B[m[32m+                element
(B[m[32m+                    .attributes
(B[m[32m+                    .insert("class".to_string(), remaining_classes.join(" "));
(B[m             }
         }
         // Remove the tracking attribute
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:389:
         element.attributes.shift_remove("data-used-class");
     }
[31m-    
(B[m[32m+
(B[m     // Remove ID attribute if it was used for inlining
     if let Some(used_id) = element.attributes.get("data-used-id") {
         if let Some(id) = element.attributes.get("id") {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:399:
         // Remove the tracking attribute
         element.attributes.shift_remove("data-used-id");
     }
[31m-    
(B[m[32m+
(B[m     // Process children
     for child in &mut element.children {
         if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:420:
 /// Extract CSS rules from a parsed stylesheet
 fn extract_css_rules(stylesheet: &StyleSheet) -> Vec<CssRuleData> {
     let mut rules = Vec::new();
[31m-    
(B[m[32m+
(B[m     // Iterate through rules in the stylesheet
     for rule in &stylesheet.rules.0 {
         match rule {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:430:
                     if let Some(selector_str) = extract_selector_string(sel) {
                         // Try to parse the selector
                         let parsed_selectors = parse_selector(&selector_str);
[31m-                        
(B[m[32m+
(B[m                         // Calculate specificity
                         let specificity = if let Some(ref selectors) = parsed_selectors {
                             calculate_selector_list_specificity(selectors)
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:437:
                         } else {
                             calculate_selector_specificity(&selector_str)
                         };
[31m-                        
(B[m[32m+
(B[m                         // Extract declarations
                         let mut declarations = Vec::new();
                         for property in &style_rule.declarations.declarations {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:448:
                                 }
                             }
                         }
[31m-                        
(B[m[32m+
(B[m                         if !declarations.is_empty() {
                             rules.push(CssRuleData {
                                 selector: selector_str,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:468:
             }
         }
     }
[31m-    
(B[m[32m+
(B[m     rules
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:477:
     // Convert selector to string representation
     // For now, use debug format and clean it up
     let debug_str = format!("{:?}", selector);
[31m-    
(B[m[32m+
(B[m     // Try to extract the selector string from the debug format
     // Format is: Selector(SELECTOR, specificity = ...)
     if debug_str.starts_with("Selector(") {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:486:
             return Some(selector_part.to_string());
         }
     }
[31m-    
(B[m[32m+
(B[m     None
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:493:
[31m-
(B[m /// Calculate CSS specificity for a selector
 /// Returns a u32 where higher values mean higher specificity
 /// Format: AAABBBCCC where AAA = ID count, BBB = class count, CCC = element count
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:506:
 
 /// Parse a CSS selector string into a SelectorList
 fn parse_selector(selector_str: &str) -> Option<SelectorList<SvgSelectorImpl>> {
[31m-    
(B[m     struct Parser;
[31m-    
(B[m[32m+
(B[m     impl<'i> SelectorParser<'i> for Parser {
         type Impl = SvgSelectorImpl;
         type Error = selectors::parser::SelectorParseErrorKind<'i>;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:515:
[31m-        
(B[m[32m+
(B[m         fn parse_non_ts_pseudo_class(
             &self,
             _location: cssparser::SourceLocation,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:519:
             _name: cssparser::CowRcStr<'i>,
[31m-        ) -> Result<<Self::Impl as selectors::parser::SelectorImpl>::NonTSPseudoClass, cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>> {
(B[m[32m+        ) -> Result<
(B[m[32m+            <Self::Impl as selectors::parser::SelectorImpl>::NonTSPseudoClass,
(B[m[32m+            cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>,
(B[m[32m+        > {
(B[m             Err(cssparser::ParseError {
[31m-                kind: cssparser::ParseErrorKind::Basic(cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Ident(_name))),
(B[m[32m+                kind: cssparser::ParseErrorKind::Basic(
(B[m[32m+                    cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Ident(_name)),
(B[m[32m+                ),
(B[m                 location: _location,
             })
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:526:
[31m-        
(B[m[32m+
(B[m         fn parse_non_ts_functional_pseudo_class<'t>(
             &self,
             _name: cssparser::CowRcStr<'i>,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:530:
             _parser: &mut cssparser::Parser<'i, 't>,
[31m-        ) -> Result<<Self::Impl as selectors::parser::SelectorImpl>::NonTSPseudoClass, cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>> {
(B[m[32m+        ) -> Result<
(B[m[32m+            <Self::Impl as selectors::parser::SelectorImpl>::NonTSPseudoClass,
(B[m[32m+            cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>,
(B[m[32m+        > {
(B[m             Err(cssparser::ParseError {
[31m-                kind: cssparser::ParseErrorKind::Basic(cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Function(_name))),
(B[m[32m+                kind: cssparser::ParseErrorKind::Basic(
(B[m[32m+                    cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Function(
(B[m[32m+                        _name,
(B[m[32m+                    )),
(B[m[32m+                ),
(B[m                 location: _parser.current_source_location(),
             })
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:537:
[31m-        
(B[m[32m+
(B[m         fn parse_pseudo_element(
             &self,
             _location: cssparser::SourceLocation,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:541:
             _name: cssparser::CowRcStr<'i>,
[31m-        ) -> Result<<Self::Impl as selectors::parser::SelectorImpl>::PseudoElement, cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>> {
(B[m[32m+        ) -> Result<
(B[m[32m+            <Self::Impl as selectors::parser::SelectorImpl>::PseudoElement,
(B[m[32m+            cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>,
(B[m[32m+        > {
(B[m             Err(cssparser::ParseError {
[31m-                kind: cssparser::ParseErrorKind::Basic(cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Ident(_name))),
(B[m[32m+                kind: cssparser::ParseErrorKind::Basic(
(B[m[32m+                    cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Ident(_name)),
(B[m[32m+                ),
(B[m                 location: _location,
             })
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:548:
[31m-        
(B[m[32m+
(B[m         fn parse_functional_pseudo_element<'t>(
             &self,
             _name: cssparser::CowRcStr<'i>,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:552:
             _parser: &mut cssparser::Parser<'i, 't>,
[31m-        ) -> Result<<Self::Impl as selectors::parser::SelectorImpl>::PseudoElement, cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>> {
(B[m[32m+        ) -> Result<
(B[m[32m+            <Self::Impl as selectors::parser::SelectorImpl>::PseudoElement,
(B[m[32m+            cssparser::ParseError<'i, selectors::parser::SelectorParseErrorKind<'i>>,
(B[m[32m+        > {
(B[m             Err(cssparser::ParseError {
[31m-                kind: cssparser::ParseErrorKind::Basic(cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Function(_name))),
(B[m[32m+                kind: cssparser::ParseErrorKind::Basic(
(B[m[32m+                    cssparser::BasicParseErrorKind::UnexpectedToken(cssparser::Token::Function(
(B[m[32m+                        _name,
(B[m[32m+                    )),
(B[m[32m+                ),
(B[m                 location: _parser.current_source_location(),
             })
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:559:
[31m-        
(B[m[31m-        fn default_namespace(&self) -> Option<<Self::Impl as selectors::parser::SelectorImpl>::NamespaceUrl> {
(B[m[32m+
(B[m[32m+        fn default_namespace(
(B[m[32m+            &self,
(B[m[32m+        ) -> Option<<Self::Impl as selectors::parser::SelectorImpl>::NamespaceUrl> {
(B[m             None
         }
[31m-        
(B[m[32m+
(B[m         fn namespace_for_prefix(
             &self,
             _prefix: &<Self::Impl as selectors::parser::SelectorImpl>::NamespacePrefix,
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:568:
             None
         }
     }
[31m-    
(B[m[32m+
(B[m     let mut input = cssparser::ParserInput::new(selector_str);
     let mut parser = cssparser::Parser::new(&mut input);
[31m-    
(B[m[32m+
(B[m     SelectorList::parse(&Parser, &mut parser, selectors::parser::ParseRelative::No).ok()
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:578:
 /// Calculate specificity for a parsed selector list
 fn calculate_selector_list_specificity(selectors: &SelectorList<SvgSelectorImpl>) -> u32 {
[31m-    selectors.0.iter()
(B[m[32m+    selectors
(B[m[32m+        .0
(B[m[32m+        .iter()
(B[m         .map(calculate_parsed_selector_specificity)
         .max()
         .unwrap_or(0)
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:584:
 }
 
 /// Calculate specificity for a parsed selector
[31m-fn calculate_parsed_selector_specificity(selector: &selectors::parser::Selector<SvgSelectorImpl>) -> u32 {
(B[m[32m+fn calculate_parsed_selector_specificity(
(B[m[32m+    selector: &selectors::parser::Selector<SvgSelectorImpl>,
(B[m[32m+) -> u32 {
(B[m     selector.specificity()
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/inline_styles.rs:591:
 // TODO: Add tests when test_utils module is available
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:1:
[31m-pub mod remove_useless_transforms;
(B[m pub mod remove_useless_stroke_and_fill;
[32m+pub mod remove_useless_transforms;
(B[m // this_file: svgn/src/plugins/mod.rs
 
 // Built-in SVG optimization plugins
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:14:
 pub mod cleanup_ids;
 pub mod cleanup_list_of_values;
 pub mod cleanup_numeric_values;
[31m-pub mod convert_colors;
(B[m[31m-pub mod convert_style_to_attrs;
(B[m[31m-pub mod merge_styles;
(B[m[31m-pub mod remove_attrs;
(B[m[31m-pub mod remove_comments;
(B[m[31m-pub mod remove_desc;
(B[m[31m-pub mod remove_doctype;
(B[m[31m-pub mod remove_empty_attrs;
(B[m[31m-pub mod remove_empty_containers;
(B[m[31m-pub mod remove_empty_text;
(B[m[31m-pub mod remove_metadata;
(B[m[31m-pub mod remove_style_element;
(B[m[31m-pub mod remove_title;
(B[m[31m-pub mod remove_unknowns_and_defaults;
(B[m[31m-pub mod remove_xml_proc_inst;
(B[m[31m-pub mod sort_attrs;
(B[m[31m-pub mod remove_attributes_by_selector;
(B[m pub mod collapse_groups;
[32m+pub mod convert_colors;
(B[m pub mod convert_ellipse_to_circle;
 pub mod convert_one_stop_gradients;
 pub mod convert_path_data;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:38:
 pub mod convert_shape_to_path;
[32m+pub mod convert_style_to_attrs;
(B[m pub mod convert_transform;
 pub mod inline_styles;
[32m+pub mod merge_styles;
(B[m pub mod minify_styles;
 pub mod prefix_ids;
[32m+pub mod remove_attributes_by_selector;
(B[m[32m+pub mod remove_attrs;
(B[m[32m+pub mod remove_comments;
(B[m pub mod remove_deprecated_attrs;
[32m+pub mod remove_desc;
(B[m pub mod remove_dimensions;
[32m+pub mod remove_doctype;
(B[m pub mod remove_editors_ns_data;
 pub mod remove_elements_by_attr;
[32m+pub mod remove_empty_attrs;
(B[m[32m+pub mod remove_empty_containers;
(B[m[32m+pub mod remove_empty_text;
(B[m pub mod remove_hidden_elems;
[32m+pub mod remove_metadata;
(B[m pub mod remove_non_inheritable_group_attrs;
 pub mod remove_off_canvas_paths;
 pub mod remove_raster_images;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:51:
 pub mod remove_scripts;
[32m+pub mod remove_style_element;
(B[m[32m+pub mod remove_title;
(B[m[32m+pub mod remove_unknowns_and_defaults;
(B[m pub mod remove_unused_ns;
 pub mod remove_useless_defs;
 pub mod remove_view_box;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:55:
 pub mod remove_xlink;
[32m+pub mod remove_xml_proc_inst;
(B[m pub mod remove_xmlns;
[32m+pub mod sort_attrs;
(B[m pub mod sort_defs_children;
 
 // Re-export plugins
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:64:
 pub use cleanup_ids::CleanupIdsPlugin;
 pub use cleanup_list_of_values::CleanupListOfValuesPlugin;
 pub use cleanup_numeric_values::CleanupNumericValuesPlugin;
[31m-pub use convert_colors::ConvertColorsPlugin;
(B[m[31m-pub use convert_style_to_attrs::ConvertStyleToAttrsPlugin;
(B[m[31m-pub use merge_styles::MergeStylesPlugin;
(B[m[31m-pub use remove_attrs::RemoveAttrsPlugin;
(B[m[31m-pub use remove_comments::RemoveCommentsPlugin;
(B[m[31m-pub use remove_desc::RemoveDescPlugin;
(B[m[31m-pub use remove_doctype::RemoveDoctypePlugin;
(B[m[31m-pub use remove_empty_attrs::RemoveEmptyAttrsPlugin;
(B[m[31m-pub use remove_empty_containers::RemoveEmptyContainersPlugin;
(B[m[31m-pub use remove_empty_text::RemoveEmptyTextPlugin;
(B[m[31m-pub use remove_metadata::RemoveMetadataPlugin;
(B[m[31m-pub use remove_style_element::RemoveStyleElement;
(B[m[31m-pub use remove_title::RemoveTitlePlugin;
(B[m[31m-pub use remove_unknowns_and_defaults::RemoveUnknownsAndDefaultsPlugin;
(B[m[31m-pub use remove_xml_proc_inst::RemoveXMLProcInstPlugin;
(B[m[31m-pub use sort_attrs::SortAttrsPlugin;
(B[m[31m-pub use remove_attributes_by_selector::RemoveAttributesBySelectorPlugin;
(B[m pub use collapse_groups::CollapseGroupsPlugin;
[32m+pub use convert_colors::ConvertColorsPlugin;
(B[m pub use convert_ellipse_to_circle::ConvertEllipseToCirclePlugin;
 pub use convert_one_stop_gradients::ConvertOneStopGradientsPlugin;
 pub use convert_path_data::ConvertPathDataPlugin;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:88:
 pub use convert_shape_to_path::ConvertShapeToPathPlugin;
[32m+pub use convert_style_to_attrs::ConvertStyleToAttrsPlugin;
(B[m pub use convert_transform::ConvertTransformPlugin;
 pub use inline_styles::InlineStylesPlugin;
[32m+pub use merge_styles::MergeStylesPlugin;
(B[m pub use minify_styles::MinifyStylesPlugin;
 pub use prefix_ids::PrefixIdsPlugin;
[32m+pub use remove_attributes_by_selector::RemoveAttributesBySelectorPlugin;
(B[m[32m+pub use remove_attrs::RemoveAttrsPlugin;
(B[m[32m+pub use remove_comments::RemoveCommentsPlugin;
(B[m pub use remove_deprecated_attrs::RemoveDeprecatedAttrsPlugin;
[32m+pub use remove_desc::RemoveDescPlugin;
(B[m pub use remove_dimensions::RemoveDimensionsPlugin;
[32m+pub use remove_doctype::RemoveDoctypePlugin;
(B[m pub use remove_editors_ns_data::RemoveEditorsNSDataPlugin;
 pub use remove_elements_by_attr::RemoveElementsByAttrPlugin;
[32m+pub use remove_empty_attrs::RemoveEmptyAttrsPlugin;
(B[m[32m+pub use remove_empty_containers::RemoveEmptyContainersPlugin;
(B[m[32m+pub use remove_empty_text::RemoveEmptyTextPlugin;
(B[m pub use remove_hidden_elems::RemoveHiddenElemsPlugin;
[32m+pub use remove_metadata::RemoveMetadataPlugin;
(B[m pub use remove_non_inheritable_group_attrs::RemoveNonInheritableGroupAttrsPlugin;
 pub use remove_off_canvas_paths::RemoveOffCanvasPathsPlugin;
 pub use remove_raster_images::RemoveRasterImagesPlugin;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/mod.rs:101:
 pub use remove_scripts::RemoveScriptsPlugin;
[32m+pub use remove_style_element::RemoveStyleElement;
(B[m[32m+pub use remove_title::RemoveTitlePlugin;
(B[m[32m+pub use remove_unknowns_and_defaults::RemoveUnknownsAndDefaultsPlugin;
(B[m pub use remove_unused_ns::RemoveUnusedNSPlugin;
 pub use remove_useless_defs::RemoveUselessDefsPlugin;
[31m-pub use remove_useless_transforms::RemoveUselessTransformsPlugin;
(B[m pub use remove_useless_stroke_and_fill::RemoveUselessStrokeAndFillPlugin;
[32m+pub use remove_useless_transforms::RemoveUselessTransformsPlugin;
(B[m pub use remove_view_box::RemoveViewBoxPlugin;
 pub use remove_xlink::RemoveXlinkPlugin;
[32m+pub use remove_xml_proc_inst::RemoveXMLProcInstPlugin;
(B[m pub use remove_xmlns::RemoveXMLNSPlugin;
[32m+pub use sort_attrs::SortAttrsPlugin;
(B[m pub use sort_defs_children::SortDefsChildrenPlugin;
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:6:
 //! It supports single selectors or multiple selectors with different attribute removals.
 
 use crate::ast::{Document, Element, Node};
[31m-use crate::plugin::{Plugin, PluginInfo, PluginResult, PluginError};
(B[m[31m-use serde_json::Value;
(B[m[31m-use selectors::SelectorList;
(B[m[32m+use crate::plugin::{Plugin, PluginError, PluginInfo, PluginResult};
(B[m[32m+use cssparser::ToCss;
(B[m use selectors::attr::{AttrSelectorOperation, CaseSensitivity, NamespaceConstraint};
[31m-use selectors::matching::{matches_selector_list, MatchingContext, MatchingMode, ElementSelectorFlags};
(B[m[32m+use selectors::matching::{
(B[m[32m+    matches_selector_list, ElementSelectorFlags, MatchingContext, MatchingMode,
(B[m[32m+};
(B[m use selectors::NthIndexCache;
[31m-use cssparser::ToCss;
(B[m[32m+use selectors::SelectorList;
(B[m[32m+use serde_json::Value;
(B[m 
 /// Plugin to remove attributes by CSS selector
 pub struct RemoveAttributesBySelectorPlugin;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:37:
     /// Parse parameters from JSON value
     pub fn from_value(value: Option<&Value>) -> PluginResult<Self> {
         let mut selectors = Vec::new();
[31m-        
(B[m[32m+
(B[m         if let Some(Value::Object(map)) = value {
             // Check if we have a single selector config or multiple
             if let Some(selector_val) = map.get("selector") {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:44:
                 // Single selector config
[31m-                let selector = selector_val.as_str()
(B[m[31m-                    .ok_or_else(|| PluginError::InvalidConfig("selector must be a string".to_string()))?
(B[m[32m+                let selector = selector_val
(B[m[32m+                    .as_str()
(B[m[32m+                    .ok_or_else(|| {
(B[m[32m+                        PluginError::InvalidConfig("selector must be a string".to_string())
(B[m[32m+                    })?
(B[m                     .to_string();
[31m-                
(B[m[32m+
(B[m                 let attributes = if let Some(attrs_val) = map.get("attributes") {
                     parse_attributes(attrs_val)?
                 } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:52:
[31m-                    return Err(PluginError::InvalidConfig("attributes parameter is required".to_string()));
(B[m[32m+                    return Err(PluginError::InvalidConfig(
(B[m[32m+                        "attributes parameter is required".to_string(),
(B[m[32m+                    ));
(B[m                 };
[31m-                
(B[m[31m-                selectors.push(SelectorConfig { selector, attributes });
(B[m[32m+
(B[m[32m+                selectors.push(SelectorConfig {
(B[m[32m+                    selector,
(B[m[32m+                    attributes,
(B[m[32m+                });
(B[m             } else if let Some(Value::Array(selector_configs)) = map.get("selectors") {
                 // Multiple selector configs
                 for config in selector_configs {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:59:
                     if let Value::Object(config_map) = config {
[31m-                        let selector = config_map.get("selector")
(B[m[32m+                        let selector = config_map
(B[m[32m+                            .get("selector")
(B[m                             .and_then(|v| v.as_str())
[31m-                            .ok_or_else(|| PluginError::InvalidConfig("selector must be a string".to_string()))?
(B[m[32m+                            .ok_or_else(|| {
(B[m[32m+                                PluginError::InvalidConfig("selector must be a string".to_string())
(B[m[32m+                            })?
(B[m                             .to_string();
[31m-                        
(B[m[32m+
(B[m                         let attributes = if let Some(attrs_val) = config_map.get("attributes") {
                             parse_attributes(attrs_val)?
                         } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:68:
[31m-                            return Err(PluginError::InvalidConfig("attributes parameter is required".to_string()));
(B[m[32m+                            return Err(PluginError::InvalidConfig(
(B[m[32m+                                "attributes parameter is required".to_string(),
(B[m[32m+                            ));
(B[m                         };
[31m-                        
(B[m[31m-                        selectors.push(SelectorConfig { selector, attributes });
(B[m[32m+
(B[m[32m+                        selectors.push(SelectorConfig {
(B[m[32m+                            selector,
(B[m[32m+                            attributes,
(B[m[32m+                        });
(B[m                     } else {
[31m-                        return Err(PluginError::InvalidConfig("selector config must be an object".to_string()));
(B[m[32m+                        return Err(PluginError::InvalidConfig(
(B[m[32m+                            "selector config must be an object".to_string(),
(B[m[32m+                        ));
(B[m                     }
                 }
             } else {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:77:
[31m-                return Err(PluginError::InvalidConfig("either 'selector' or 'selectors' parameter is required".to_string()));
(B[m[32m+                return Err(PluginError::InvalidConfig(
(B[m[32m+                    "either 'selector' or 'selectors' parameter is required".to_string(),
(B[m[32m+                ));
(B[m             }
         } else {
[31m-            return Err(PluginError::InvalidConfig("parameters must be an object".to_string()));
(B[m[32m+            return Err(PluginError::InvalidConfig(
(B[m[32m+                "parameters must be an object".to_string(),
(B[m[32m+            ));
(B[m         }
[31m-        
(B[m[32m+
(B[m         if selectors.is_empty() {
[31m-            return Err(PluginError::InvalidConfig("at least one selector is required".to_string()));
(B[m[32m+            return Err(PluginError::InvalidConfig(
(B[m[32m+                "at least one selector is required".to_string(),
(B[m[32m+            ));
(B[m         }
[31m-        
(B[m[32m+
(B[m         Ok(Self { selectors })
     }
 }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:98:
                 if let Value::String(s) = attr {
                     result.push(s.clone());
                 } else {
[31m-                    return Err(PluginError::InvalidConfig("attributes must be strings".to_string()));
(B[m[32m+                    return Err(PluginError::InvalidConfig(
(B[m[32m+                        "attributes must be strings".to_string(),
(B[m[32m+                    ));
(B[m                 }
             }
             Ok(result)
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:105:
         }
[31m-        _ => Err(PluginError::InvalidConfig("attributes must be a string or array of strings".to_string())),
(B[m[32m+        _ => Err(PluginError::InvalidConfig(
(B[m[32m+            "attributes must be a string or array of strings".to_string(),
(B[m[32m+        )),
(B[m     }
 }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:163:
         false
     }
 
[31m-    fn has_local_name(&self, local_name: &<Self::Impl as selectors::SelectorImpl>::BorrowedLocalName) -> bool {
(B[m[32m+    fn has_local_name(
(B[m[32m+        &self,
(B[m[32m+        local_name: &<Self::Impl as selectors::SelectorImpl>::BorrowedLocalName,
(B[m[32m+    ) -> bool {
(B[m         self.element.name == local_name
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:170:
[31m-    fn has_namespace(&self, ns: &<Self::Impl as selectors::SelectorImpl>::BorrowedNamespaceUrl) -> bool {
(B[m[32m+    fn has_namespace(
(B[m[32m+        &self,
(B[m[32m+        ns: &<Self::Impl as selectors::SelectorImpl>::BorrowedNamespaceUrl,
(B[m[32m+    ) -> bool {
(B[m         // SVG elements don't have namespaces in our AST structure
         ns.is_empty()
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:181:
         id: &<Self::Impl as selectors::SelectorImpl>::Identifier,
         _case_sensitivity: CaseSensitivity,
     ) -> bool {
[31m-        self.element.attributes.get("id").is_some_and(|v| *v == id.0)
(B[m[32m+        self.element
(B[m[32m+            .attributes
(B[m[32m+            .get("id")
(B[m[32m+            .is_some_and(|v| *v == id.0)
(B[m     }
 
     fn has_class(
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:203:
         operation: &AttrSelectorOperation<&<Self::Impl as selectors::SelectorImpl>::AttrValue>,
     ) -> bool {
         // We only support no namespace for now
[31m-        if !matches!(ns, NamespaceConstraint::Specific(url) if url.0.is_empty()) && !matches!(ns, NamespaceConstraint::Any) {
(B[m[32m+        if !matches!(ns, NamespaceConstraint::Specific(url) if url.0.is_empty())
(B[m[32m+            && !matches!(ns, NamespaceConstraint::Any)
(B[m[32m+        {
(B[m             return false;
         }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:220:
                         Equal => attr_value == value.0.as_str(),
                         Includes => attr_value.split_whitespace().any(|v| v == value.0.as_str()),
                         DashMatch => {
[31m-                            attr_value == value.0.as_str() || attr_value.starts_with(&format!("{}-", value.0))
(B[m[32m+                            attr_value == value.0.as_str()
(B[m[32m+                                || attr_value.starts_with(&format!("{}-", value.0))
(B[m                         }
                         Prefix => attr_value.starts_with(&value.0),
                         Substring => attr_value.contains(&value.0),
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:447:
             selectors::matching::NeedsSelectorFlags::No,
             selectors::matching::IgnoreNthChildForInvalidation::No,
         );
[31m-        
(B[m[32m+
(B[m         if matches_selector_list(selector_list, &wrapper, &mut context) {
             matching_paths.push(current_path.clone());
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:454:
[31m-        
(B[m[32m+
(B[m         // Recursively search children
         for (i, child) in element.children.iter().enumerate() {
             let mut child_path = current_path.clone();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:469:
         }
         return None;
     }
[31m-    
(B[m[32m+
(B[m     if let Node::Element(element) = node {
         if let Some(&index) = path.first() {
             if let Some(child) = element.children.get_mut(index) {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:484:
     fn name(&self) -> &'static str {
         "removeAttributesBySelector"
     }
[31m-    
(B[m[32m+
(B[m     fn description(&self) -> &'static str {
         "removes attributes of elements that match a css selector"
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:491:
[31m-    
(B[m[31m-    fn apply(&mut self, document: &mut Document, _plugin_info: &PluginInfo, params: Option<&Value>) -> PluginResult<()> {
(B[m[32m+
(B[m[32m+    fn apply(
(B[m[32m+        &mut self,
(B[m[32m+        document: &mut Document,
(B[m[32m+        _plugin_info: &PluginInfo,
(B[m[32m+        params: Option<&Value>,
(B[m[32m+    ) -> PluginResult<()> {
(B[m         let params = RemoveAttributesBySelectorParams::from_value(params)?;
[31m-        
(B[m[32m+
(B[m         // Process each selector configuration
         for config in &params.selectors {
             // Parse the CSS selector
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:498:
             let mut parser_input = cssparser::ParserInput::new(&config.selector);
             let mut parser = cssparser::Parser::new(&mut parser_input);
             let parsing_mode = selectors::parser::ParseRelative::No;
[31m-            
(B[m[32m+
(B[m             struct DummyParser;
             impl<'i> selectors::Parser<'i> for DummyParser {
                 type Impl = SelectorImpl;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:505:
                 type Error = selectors::parser::SelectorParseErrorKind<'i>;
             }
[31m-            
(B[m[31m-            let selector_list = match SelectorList::<SelectorImpl>::parse(&DummyParser, &mut parser, parsing_mode) {
(B[m[32m+
(B[m[32m+            let selector_list = match SelectorList::<SelectorImpl>::parse(
(B[m[32m+                &DummyParser,
(B[m[32m+                &mut parser,
(B[m[32m+                parsing_mode,
(B[m[32m+            ) {
(B[m                 Ok(list) => list,
                 Err(_) => {
                     return Err(PluginError::InvalidConfig(format!(
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:514:
                     )));
                 }
             };
[31m-            
(B[m[32m+
(B[m             // Collect paths to matching elements
             let mut matching_paths = Vec::new();
             let root_node = Node::Element(document.root.clone());
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:521:
             collect_matching_paths(&root_node, &selector_list, vec![], &mut matching_paths);
[31m-            
(B[m[32m+
(B[m             // Remove specified attributes from matching elements
             let mut root_node_mut = Node::Element(document.root.clone());
             for path in matching_paths {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:529:
                     }
                 }
             }
[31m-            
(B[m[32m+
(B[m             // Update the document root
             if let Node::Element(updated_root) = root_node_mut {
                 document.root = updated_root;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:536:
             }
         }
[31m-        
(B[m[32m+
(B[m         Ok(())
     }
[31m-    
(B[m[32m+
(B[m     fn validate_params(&self, params: Option<&Value>) -> PluginResult<()> {
         // Try to parse parameters to validate them
         RemoveAttributesBySelectorParams::from_value(params)?;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:558:
 
     fn create_test_document() -> Document {
         let mut doc = Document::default();
[31m-        
(B[m[32m+
(B[m         // Create a simple SVG structure
         let mut svg = Element {
             name: "svg".to_string(),
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:566:
             attributes: IndexMap::new(),
             children: vec![],
         };
[31m-        
(B[m[32m+
(B[m         // Add rect with fill="#00ff00"
         let mut rect = Element {
             name: "rect".to_string(),
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:576:
         };
         rect.attributes.insert("x".to_string(), "0".to_string());
         rect.attributes.insert("y".to_string(), "0".to_string());
[31m-        rect.attributes.insert("width".to_string(), "100".to_string());
(B[m[31m-        rect.attributes.insert("height".to_string(), "100".to_string());
(B[m[31m-        rect.attributes.insert("fill".to_string(), "#00ff00".to_string());
(B[m[31m-        rect.attributes.insert("stroke".to_string(), "#00ff00".to_string());
(B[m[31m-        
(B[m[32m+        rect.attributes
(B[m[32m+            .insert("width".to_string(), "100".to_string());
(B[m[32m+        rect.attributes
(B[m[32m+            .insert("height".to_string(), "100".to_string());
(B[m[32m+        rect.attributes
(B[m[32m+            .insert("fill".to_string(), "#00ff00".to_string());
(B[m[32m+        rect.attributes
(B[m[32m+            .insert("stroke".to_string(), "#00ff00".to_string());
(B[m[32m+
(B[m         svg.children.push(Node::Element(rect));
         doc.root = svg;
         doc
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:591:
         let mut doc = create_test_document();
         let mut plugin = RemoveAttributesBySelectorPlugin;
         let plugin_info = PluginInfo::default();
[31m-        
(B[m[32m+
(B[m         let params = json!({
             "selector": "[fill='#00ff00']",
             "attributes": "fill"
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:598:
         });
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Check that fill was removed but stroke remains
         if let Some(Node::Element(ref rect)) = doc.root.children.first() {
             assert_eq!(rect.attributes.get("fill"), None);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:611:
         let mut doc = create_test_document();
         let mut plugin = RemoveAttributesBySelectorPlugin;
         let plugin_info = PluginInfo::default();
[31m-        
(B[m[32m+
(B[m         let params = json!({
             "selector": "[fill='#00ff00']",
             "attributes": ["fill", "stroke"]
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:618:
         });
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Check that both fill and stroke were removed
         if let Some(Node::Element(ref rect)) = doc.root.children.first() {
             assert_eq!(rect.attributes.get("fill"), None);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:631:
     #[test]
     fn test_multiple_selectors() {
         let mut doc = create_test_document();
[31m-        
(B[m[32m+
(B[m         // Add an element with id="remove"
         let mut circle = Element {
             name: "circle".to_string(),
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:639:
             attributes: IndexMap::new(),
             children: vec![],
         };
[31m-            circle.attributes.insert("id".to_string(), "remove".to_string());
(B[m[31m-            circle.attributes.insert("cx".to_string(), "50".to_string());
(B[m[31m-            circle.attributes.insert("cy".to_string(), "50".to_string());
(B[m[31m-            circle.attributes.insert("r".to_string(), "25".to_string());
(B[m[31m-            circle.attributes.insert("stroke".to_string(), "black".to_string());
(B[m[31m-            
(B[m[32m+        circle
(B[m[32m+            .attributes
(B[m[32m+            .insert("id".to_string(), "remove".to_string());
(B[m[32m+        circle.attributes.insert("cx".to_string(), "50".to_string());
(B[m[32m+        circle.attributes.insert("cy".to_string(), "50".to_string());
(B[m[32m+        circle.attributes.insert("r".to_string(), "25".to_string());
(B[m[32m+        circle
(B[m[32m+            .attributes
(B[m[32m+            .insert("stroke".to_string(), "black".to_string());
(B[m[32m+
(B[m         doc.root.children.push(Node::Element(circle));
[31m-        
(B[m[32m+
(B[m         let mut plugin = RemoveAttributesBySelectorPlugin;
         let plugin_info = PluginInfo::default();
[31m-        
(B[m[32m+
(B[m         let params = json!({
             "selectors": [
                 {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:662:
                 }
             ]
         });
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Check results
         // Check rect
         if let Some(Node::Element(ref rect)) = doc.root.children.first() {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:671:
             assert_eq!(rect.attributes.get("fill"), None);
             assert_eq!(rect.attributes.get("stroke"), Some(&"#00ff00".to_string()));
         }
[31m-        
(B[m[32m+
(B[m         // Check circle
         if let Some(Node::Element(ref circle)) = doc.root.children.get(1) {
             assert_eq!(circle.attributes.get("id"), None);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:685:
         let mut doc = create_test_document();
         let mut plugin = RemoveAttributesBySelectorPlugin;
         let plugin_info = PluginInfo::default();
[31m-        
(B[m[32m+
(B[m         let params = json!({
             "selector": "rect",
             "attributes": "fill"
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:692:
         });
[31m-        
(B[m[32m+
(B[m         plugin.apply(&mut doc, &plugin_info, Some(&params)).unwrap();
[31m-        
(B[m[32m+
(B[m         // Check that fill was removed from rect
         if let Some(Node::Element(ref rect)) = doc.root.children.first() {
             assert_eq!(rect.attributes.get("fill"), None);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:704:
         let mut doc = create_test_document();
         let mut plugin = RemoveAttributesBySelectorPlugin;
         let plugin_info = PluginInfo::default();
[31m-        
(B[m[32m+
(B[m         let params = json!({
             "selector": "[invalid selector",
             "attributes": "fill"
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:711:
         });
[31m-        
(B[m[32m+
(B[m         let result = plugin.apply(&mut doc, &plugin_info, Some(&params));
         assert!(result.is_err());
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_attributes_by_selector.rs:716:
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:2:
 
 use crate::ast::{Document, Element, Node};
 use crate::plugin::{Plugin, PluginInfo, PluginResult};
[32m+use once_cell::sync::Lazy;
(B[m use serde_json::Value;
 use std::collections::{HashMap, HashSet};
[31m-use once_cell::sync::Lazy;
(B[m 
 /// SVG shape elements that can have stroke and fill attributes
 static SHAPE_ELEMENTS: Lazy<HashSet<&'static str>> = Lazy::new(|| {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:11:
     HashSet::from([
[31m-        "rect", "circle", "ellipse", "line", "polyline", "polygon", 
(B[m[31m-        "path", "text", "tspan", "textPath", "altGlyph", "glyph", "missing-glyph"
(B[m[32m+        "rect",
(B[m[32m+        "circle",
(B[m[32m+        "ellipse",
(B[m[32m+        "line",
(B[m[32m+        "polyline",
(B[m[32m+        "polygon",
(B[m[32m+        "path",
(B[m[32m+        "text",
(B[m[32m+        "tspan",
(B[m[32m+        "textPath",
(B[m[32m+        "altGlyph",
(B[m[32m+        "glyph",
(B[m[32m+        "missing-glyph",
(B[m     ])
 });
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:20:
 /// - Set to "none" when no parent element has these attributes
 /// - Set to transparent (opacity 0)
 /// - Stroke width set to 0
[31m-/// 
(B[m[32m+///
(B[m /// It also handles inheritance and can optionally remove elements that have
 /// no visible stroke or fill (removeNone parameter).
 pub struct RemoveUselessStrokeAndFillPlugin;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:49:
 
     fn parse_params(&self, params: Option<&Value>) -> RemoveUselessStrokeAndFillParams {
         let mut result = RemoveUselessStrokeAndFillParams::default();
[31m-        
(B[m[32m+
(B[m         if let Some(Value::Object(obj)) = params {
             if let Some(Value::Bool(stroke)) = obj.get("stroke") {
                 result.stroke = *stroke;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:61:
                 result.remove_none = *remove_none;
             }
         }
[31m-        
(B[m[32m+
(B[m         result
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:70:
         if element.name == "style" || element.name == "script" {
             return true;
         }
[31m-        
(B[m[32m+
(B[m         for child in &element.children {
             if let Node::Element(child_elem) = child {
                 if self.has_style_or_script(child_elem) {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:78:
                 }
             }
         }
[31m-        
(B[m[32m+
(B[m         false
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:93:
         if element.attributes.contains_key("id") {
             return HashMap::new();
         }
[31m-        
(B[m[32m+
(B[m         // Only process shape elements
         if !SHAPE_ELEMENTS.contains(&element.name.as_str()) {
             return HashMap::new();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:100:
         }
[31m-        
(B[m[32m+
(B[m         // Compute current element styles
         let current_styles = self.compute_element_styles(element, parent_styles);
[31m-        
(B[m[32m+
(B[m         // Process stroke attributes
         if params.stroke {
             self.process_stroke_attributes(element, &current_styles, parent_styles);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:108:
         }
[31m-        
(B[m[32m+
(B[m         // Process fill attributes
         if params.fill {
             self.process_fill_attributes(element, &current_styles);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:113:
         }
[31m-        
(B[m[32m+
(B[m         // Remove element if it has no visible stroke or fill
         if params.remove_none && self.should_remove_element(element, &current_styles) {
             nodes_to_remove.push(element as *mut Element);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:118:
         }
[31m-        
(B[m[32m+
(B[m         current_styles
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:126:
         parent_styles: &HashMap<String, String>,
     ) -> HashMap<String, String> {
         let mut styles = parent_styles.clone();
[31m-        
(B[m[32m+
(B[m         // Override with element's own attributes
         for (attr, value) in &element.attributes {
[31m-            if attr.starts_with("stroke") || attr.starts_with("fill") || attr.starts_with("marker") {
(B[m[32m+            if attr.starts_with("stroke") || attr.starts_with("fill") || attr.starts_with("marker")
(B[m[32m+            {
(B[m                 styles.insert(attr.clone(), value.clone());
             }
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:136:
[31m-        
(B[m[32m+
(B[m         // Parse style attribute
         if let Some(style_attr) = element.attributes.get("style") {
             for part in style_attr.split(';') {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:140:
                 if let Some((key, value)) = part.split_once(':') {
                     let key = key.trim();
                     let value = value.trim();
[31m-                    if key.starts_with("stroke") || key.starts_with("fill") || key.starts_with("marker") {
(B[m[32m+                    if key.starts_with("stroke")
(B[m[32m+                        || key.starts_with("fill")
(B[m[32m+                        || key.starts_with("marker")
(B[m[32m+                    {
(B[m                         styles.insert(key.to_string(), value.to_string());
                     }
                 }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:147:
             }
         }
[31m-        
(B[m[32m+
(B[m         styles
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:160:
         let stroke_opacity = current_styles.get("stroke-opacity");
         let stroke_width = current_styles.get("stroke-width");
         let marker_end = current_styles.get("marker-end");
[31m-        
(B[m[32m+
(B[m         let should_remove_stroke = stroke.is_none_or(|s| s == "none")
             || stroke_opacity.is_some_and(|op| op == "0")
             || stroke_width.is_some_and(|w| w == "0");
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:167:
[31m-        
(B[m[32m+
(B[m         if should_remove_stroke {
             // Check if stroke-width affects marker visibility
             let can_remove = stroke_width.is_none_or(|w| w == "0") || marker_end.is_none();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:171:
[31m-            
(B[m[32m+
(B[m             if can_remove {
                 // Remove all stroke-related attributes
                 let stroke_attrs: Vec<String> = element
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:177:
                     .filter(|k| k.starts_with("stroke"))
                     .cloned()
                     .collect();
[31m-                
(B[m[32m+
(B[m                 for attr in stroke_attrs {
                     element.attributes.shift_remove(&attr);
                 }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:184:
[31m-                
(B[m[32m+
(B[m                 // Set explicit "none" if parent has non-none stroke
                 let parent_stroke = parent_styles.get("stroke");
                 if parent_stroke.is_some_and(|s| s != "none") {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:188:
[31m-                    element.attributes.insert("stroke".to_string(), "none".to_string());
(B[m[32m+                    element
(B[m[32m+                        .attributes
(B[m[32m+                        .insert("stroke".to_string(), "none".to_string());
(B[m                 }
             }
         }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:198:
     ) {
         let fill = current_styles.get("fill");
         let fill_opacity = current_styles.get("fill-opacity");
[31m-        
(B[m[31m-        let should_remove_fill = fill.is_some_and(|f| f == "none")
(B[m[31m-            || fill_opacity.is_some_and(|op| op == "0");
(B[m[31m-        
(B[m[32m+
(B[m[32m+        let should_remove_fill =
(B[m[32m+            fill.is_some_and(|f| f == "none") || fill_opacity.is_some_and(|op| op == "0");
(B[m[32m+
(B[m         if should_remove_fill {
             // Remove all fill-related attributes except fill itself
             let fill_attrs: Vec<String> = element
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:210:
                 .filter(|k| k.starts_with("fill-"))
                 .cloned()
                 .collect();
[31m-            
(B[m[32m+
(B[m             for attr in fill_attrs {
                 element.attributes.shift_remove(&attr);
             }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:217:
[31m-            
(B[m[32m+
(B[m             // Set explicit "none" if not already set
             if fill.is_none_or(|f| f != "none") {
[31m-                element.attributes.insert("fill".to_string(), "none".to_string());
(B[m[32m+                element
(B[m[32m+                    .attributes
(B[m[32m+                    .insert("fill".to_string(), "none".to_string());
(B[m             }
         }
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:229:
     ) -> bool {
         let stroke = current_styles.get("stroke");
         let fill = current_styles.get("fill");
[31m-        
(B[m[31m-        let no_stroke = stroke.is_none_or(|s| s == "none") || element.attributes.get("stroke").is_some_and(|s| s == "none");
(B[m[31m-        let no_fill = fill.is_some_and(|f| f == "none") || element.attributes.get("fill").is_some_and(|f| f == "none");
(B[m[31m-        
(B[m[32m+
(B[m[32m+        let no_stroke = stroke.is_none_or(|s| s == "none")
(B[m[32m+            || element
(B[m[32m+                .attributes
(B[m[32m+                .get("stroke")
(B[m[32m+                .is_some_and(|s| s == "none");
(B[m[32m+        let no_fill = fill.is_some_and(|f| f == "none")
(B[m[32m+            || element.attributes.get("fill").is_some_and(|f| f == "none");
(B[m[32m+
(B[m         no_stroke && no_fill
     }
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:246:
                 true
             }
         });
[31m-        
(B[m[32m+
(B[m         // Process children recursively
         for child in &mut element.children {
             if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:278:
         params: Option<&Value>,
     ) -> PluginResult<()> {
         let params = self.parse_params(params);
[31m-        
(B[m[32m+
(B[m         // Skip optimization if there are style or script elements
         if self.has_style_or_script(&document.root) {
             return Ok(());
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:285:
         }
[31m-        
(B[m[32m+
(B[m         let mut nodes_to_remove = Vec::new();
[31m-        self.process_element_recursive(&mut document.root, &params, &HashMap::new(), &mut nodes_to_remove);
(B[m[31m-        
(B[m[32m+        self.process_element_recursive(
(B[m[32m+            &mut document.root,
(B[m[32m+            &params,
(B[m[32m+            &HashMap::new(),
(B[m[32m+            &mut nodes_to_remove,
(B[m[32m+        );
(B[m[32m+
(B[m         // Remove marked elements
         if !nodes_to_remove.is_empty() {
             self.remove_marked_elements(&mut document.root, &nodes_to_remove);
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:293:
         }
[31m-        
(B[m[32m+
(B[m         Ok(())
     }
 }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:306:
     ) {
         // Process current element
         let current_styles = self.process_element(element, params, parent_styles, nodes_to_remove);
[31m-        
(B[m[32m+
(B[m         // Process children with updated styles
         for child in &mut element.children {
             if let Node::Element(child_elem) = child {
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:313:
[31m-                self.process_element_recursive(child_elem, params, &current_styles, nodes_to_remove);
(B[m[32m+                self.process_element_recursive(
(B[m[32m+                    child_elem,
(B[m[32m+                    params,
(B[m[32m+                    &current_styles,
(B[m[32m+                    nodes_to_remove,
(B[m[32m+                );
(B[m             }
         }
     }
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:324:
 
     #[test]
     fn test_remove_stroke_none() {
[31m-        let mut doc = parse_svg(r#"
(B[m[32m+        let mut doc = parse_svg(
(B[m[32m+            r#"
(B[m             <svg>
                 <rect stroke="none" fill="red" width="100" height="100"/>
             </svg>
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:331:
[31m-        "#).unwrap();
(B[m[31m-        
(B[m[32m+        "#,
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         let mut plugin = RemoveUselessStrokeAndFillPlugin::new();
         let plugin_info = PluginInfo::default();
         plugin.apply(&mut doc, &plugin_info, None).unwrap();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:336:
[31m-        
(B[m[32m+
(B[m         let output = stringify(&doc).unwrap();
         assert!(!output.contains(r#"stroke="none""#));
         assert!(output.contains(r#"fill="red""#));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:341:
 
     #[test]
     fn test_remove_fill_none() {
[31m-        let mut doc = parse_svg(r#"
(B[m[32m+        let mut doc = parse_svg(
(B[m[32m+            r#"
(B[m             <svg>
                 <rect stroke="blue" fill="none" width="100" height="100"/>
             </svg>
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:348:
[31m-        "#).unwrap();
(B[m[31m-        
(B[m[32m+        "#,
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         let mut plugin = RemoveUselessStrokeAndFillPlugin::new();
         let plugin_info = PluginInfo::default();
         plugin.apply(&mut doc, &plugin_info, None).unwrap();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:353:
[31m-        
(B[m[32m+
(B[m         let output = stringify(&doc).unwrap();
         assert!(output.contains(r#"stroke="blue""#));
         assert!(output.contains(r#"fill="none""#)); // Should keep explicit none
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:358:
 
     #[test]
     fn test_remove_zero_opacity() {
[31m-        let mut doc = parse_svg(r#"
(B[m[32m+        let mut doc = parse_svg(
(B[m[32m+            r#"
(B[m             <svg>
                 <rect stroke-opacity="0" fill-opacity="0" width="100" height="100"/>
             </svg>
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:365:
[31m-        "#).unwrap();
(B[m[31m-        
(B[m[32m+        "#,
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         let mut plugin = RemoveUselessStrokeAndFillPlugin::new();
         let plugin_info = PluginInfo::default();
         plugin.apply(&mut doc, &plugin_info, None).unwrap();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:370:
[31m-        
(B[m[32m+
(B[m         let output = stringify(&doc).unwrap();
         assert!(!output.contains("stroke-opacity"));
         assert!(output.contains(r#"fill="none""#));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:375:
 
     #[test]
     fn test_preserve_with_id() {
[31m-        let mut doc = parse_svg(r#"
(B[m[32m+        let mut doc = parse_svg(
(B[m[32m+            r#"
(B[m             <svg>
                 <rect id="test" stroke="none" fill="none" width="100" height="100"/>
             </svg>
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:382:
[31m-        "#).unwrap();
(B[m[31m-        
(B[m[32m+        "#,
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         let mut plugin = RemoveUselessStrokeAndFillPlugin::new();
         let plugin_info = PluginInfo::default();
         plugin.apply(&mut doc, &plugin_info, None).unwrap();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:387:
[31m-        
(B[m[32m+
(B[m         let output = stringify(&doc).unwrap();
         // Should preserve attributes because element has ID
         assert!(output.contains(r#"stroke="none""#));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:393:
 
     #[test]
     fn test_skip_with_style_element() {
[31m-        let mut doc = parse_svg(r#"
(B[m[32m+        let mut doc = parse_svg(
(B[m[32m+            r#"
(B[m             <svg>
                 <style>.test { fill: red; }</style>
                 <rect stroke="none" fill="none" width="100" height="100"/>
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:400:
             </svg>
[31m-        "#).unwrap();
(B[m[31m-        
(B[m[32m+        "#,
(B[m[32m+        )
(B[m[32m+        .unwrap();
(B[m[32m+
(B[m         let mut plugin = RemoveUselessStrokeAndFillPlugin::new();
         let plugin_info = PluginInfo::default();
         plugin.apply(&mut doc, &plugin_info, None).unwrap();
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:406:
[31m-        
(B[m[32m+
(B[m         let output = stringify(&doc).unwrap();
         // Should preserve attributes because of style element
         assert!(output.contains(r#"stroke="none""#));
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/plugins/remove_useless_stroke_and_fill.rs:410:
         assert!(output.contains(r#"fill="none""#));
     }
 }
[32m+
(B[mDiff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:6:
 //! SVG strings with configurable formatting options.
 
 use crate::ast::{Document, Element, Node};
[31m-use crate::config::{QuoteAttrsStyle, LineEnding};
(B[m[32m+use crate::config::{LineEnding, QuoteAttrsStyle};
(B[m use std::fmt::Write;
 use thiserror::Error;
 
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:84:
         self.quote_attrs = style;
         self
     }
[31m-    
(B[m[32m+
(B[m     /// Set line ending style
     pub fn eol(mut self, eol: LineEnding) -> Self {
         self.eol = eol;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:91:
         self
     }
[31m-    
(B[m[32m+
(B[m     /// Set final newline
     pub fn final_newline(mut self, final_newline: bool) -> Self {
         self.final_newline = final_newline;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:138:
         if self.pretty && !self.ends_with_newline(&output) {
             self.write_newline(&mut output)?;
         }
[31m-        
(B[m[32m+
(B[m         // Add final newline if requested
         if self.final_newline && !self.ends_with_newline(&output) {
             self.write_newline(&mut output)?;
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:146:
 
         Ok(output)
     }
[31m-    
(B[m[32m+
(B[m     /// Write a newline with the configured line ending
     fn write_newline(&self, output: &mut String) -> StringifyResult<()> {
         output.push_str(self.eol.as_str());
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/src/stringifier.rs:153:
         Ok(())
     }
[31m-    
(B[m[32m+
(B[m     /// Check if string ends with any kind of newline
     fn ends_with_newline(&self, s: &str) -> bool {
         s.ends_with('\n') || s.ends_with("\r\n")
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/tests/integration_test.rs:2:
 
 //! Integration tests for svgn
 
[31m-use svgn::config::{Js2SvgOptions, QuoteAttrsStyle, LineEnding};
(B[m[32m+use svgn::config::{Js2SvgOptions, LineEnding, QuoteAttrsStyle};
(B[m use svgn::{optimize, Config, OptimizeOptions, PluginConfig};
 
 #[test]
Diff in /Users/adam/Developer/vcs/github.twardoch/pub/svgn/svgn/tests/svgo_compatibility_tests.rs:4:
 //! These tests verify that SVGN is feature-compatible with SVGO
 
 use serde_json::json;
[31m-use svgn::config::{Js2SvgOptions, QuoteAttrsStyle, LineEnding};
(B[m[32m+use svgn::config::{Js2SvgOptions, LineEnding, QuoteAttrsStyle};
(B[m use svgn::{optimize, Config, OptimizeOptions, PluginConfig};
 
 /// Test helper function to run optimization with specific plugins
